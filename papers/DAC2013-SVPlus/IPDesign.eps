%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 330 575 461
%%Creator: yExport 1.2
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, November 27, 2012 1:26:13 PM CST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
770 180 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
770.000 0.00000 l
770.000 180.000 l
0.00000 180.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 770 180 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 -225.000 -90.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
225.000 90.0000 m
995.000 90.0000 l
995.000 270.000 l
225.000 270.000 l
225.000 90.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 -225.000 -90.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -225.000 -90.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 -225.000 -90.0000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
276.926 166.986 m
283.535 166.986 l
290.301 185.814 l
297.051 166.986 l
303.676 166.986 l
294.223 192.501 l
286.379 192.501 l
276.926 166.986 l
h
325.888 182.876 m
325.888 184.626 l
311.576 184.626 l
311.732 186.064 312.253 187.139 313.138 187.853  c
314.024 188.566 315.263 188.923 316.857 188.923  c
318.149 188.923 319.469 188.733 320.818 188.353  c
322.167 187.973 323.555 187.397 324.982 186.626  c
324.982 191.345 l
323.534 191.887 322.086 192.298 320.638 192.579  c
319.191 192.861 317.743 193.001 316.295 193.001  c
312.836 193.001 310.146 192.121 308.224 190.361  c
306.302 188.600 305.342 186.131 305.342 182.954  c
305.342 179.829 306.284 177.371 308.170 175.579  c
310.055 173.788 312.649 172.892 315.951 172.892  c
318.961 172.892 321.370 173.798 323.177 175.611  c
324.985 177.423 325.888 179.845 325.888 182.876  c
h
319.592 180.845 m
319.592 179.678 319.253 178.741 318.576 178.032  c
317.899 177.324 317.013 176.970 315.920 176.970  c
314.743 176.970 313.782 177.303 313.037 177.970  c
312.292 178.637 311.831 179.595 311.654 180.845  c
319.592 180.845 l
h
344.736 178.579 m
344.204 178.329 343.673 178.144 343.142 178.025  c
342.611 177.905 342.079 177.845 341.548 177.845  c
339.975 177.845 338.764 178.348 337.915 179.353  c
337.066 180.358 336.642 181.803 336.642 183.689  c
336.642 192.501 l
330.517 192.501 l
330.517 173.361 l
336.642 173.361 l
336.642 176.501 l
337.423 175.251 338.324 174.337 339.345 173.759  c
340.366 173.181 341.590 172.892 343.017 172.892  c
343.215 172.892 343.434 172.902 343.673 172.923  c
343.913 172.944 344.262 172.980 344.720 173.032  c
344.736 178.579 l
h
347.778 173.361 m
353.903 173.361 l
353.903 192.501 l
347.778 192.501 l
347.778 173.361 l
h
347.778 165.907 m
353.903 165.907 l
353.903 170.892 l
347.778 170.892 l
347.778 165.907 l
h
359.775 165.907 m
365.900 165.907 l
365.900 192.501 l
359.775 192.501 l
359.775 165.907 l
h
380.881 177.267 m
379.527 177.267 378.493 177.754 377.780 178.728  c
377.066 179.702 376.709 181.111 376.709 182.954  c
376.709 184.788 377.066 186.191 377.780 187.165  c
378.493 188.139 379.527 188.626 380.881 188.626  c
382.214 188.626 383.235 188.139 383.944 187.165  c
384.652 186.191 385.006 184.788 385.006 182.954  c
385.006 181.111 384.652 179.702 383.944 178.728  c
383.235 177.754 382.214 177.267 380.881 177.267  c
h
380.881 172.892 m
384.173 172.892 386.746 173.782 388.600 175.564  c
390.454 177.345 391.381 179.809 391.381 182.954  c
391.381 186.090 390.454 188.548 388.600 190.329  c
386.746 192.111 384.173 193.001 380.881 193.001  c
377.579 193.001 374.996 192.111 373.131 190.329  c
371.267 188.548 370.334 186.090 370.334 182.954  c
370.334 179.809 371.267 177.345 373.131 175.564  c
374.996 173.782 377.579 172.892 380.881 172.892  c
h
408.848 189.251 m
408.005 190.366 407.075 191.186 406.059 191.712  c
405.044 192.238 403.869 192.501 402.536 192.501  c
400.203 192.501 398.273 191.582 396.747 189.743  c
395.221 187.905 394.458 185.559 394.458 182.704  c
394.458 179.850 395.221 177.509 396.747 175.681  c
398.273 173.853 400.203 172.939 402.536 172.939  c
403.869 172.939 405.044 173.199 406.059 173.720  c
407.075 174.241 408.005 175.069 408.848 176.204  c
408.848 173.361 l
414.989 173.361 l
414.989 190.564 l
414.989 193.647 414.018 195.999 412.075 197.618  c
410.132 199.238 407.317 200.048 403.630 200.048  c
402.432 200.048 401.275 199.957 400.161 199.775  c
399.046 199.592 397.921 199.314 396.786 198.939  c
396.786 194.173 l
397.859 194.788 398.908 195.246 399.934 195.548  c
400.960 195.850 401.994 196.001 403.036 196.001  c
405.036 196.001 406.505 195.564 407.442 194.689  c
408.380 193.814 408.848 192.439 408.848 190.564  c
408.848 189.251 l
h
404.802 177.345 m
403.541 177.345 402.557 177.811 401.848 178.743  c
401.140 179.676 400.786 180.996 400.786 182.704  c
400.786 184.465 401.130 185.798 401.817 186.704  c
402.505 187.611 403.499 188.064 404.802 188.064  c
406.083 188.064 407.078 187.595 407.786 186.657  c
408.494 185.720 408.848 184.402 408.848 182.704  c
408.848 180.996 408.494 179.676 407.786 178.743  c
407.078 177.811 406.083 177.345 404.802 177.345  c
h
442.681 178.298 m
444.056 178.298 445.043 178.043 445.642 177.532  c
446.241 177.022 446.540 176.178 446.540 175.001  c
446.540 173.835 446.241 173.001 445.642 172.501  c
445.043 172.001 444.056 171.751 442.681 171.751  c
439.915 171.751 l
439.915 178.298 l
442.681 178.298 l
h
439.915 182.845 m
439.915 192.501 l
433.337 192.501 l
433.337 166.986 l
443.384 166.986 l
446.738 166.986 449.199 167.551 450.767 168.681  c
452.335 169.811 453.118 171.595 453.118 174.032  c
453.118 175.720 452.712 177.103 451.900 178.181  c
451.087 179.259 449.858 180.059 448.212 180.579  c
449.118 180.777 449.926 181.238 450.634 181.962  c
451.342 182.686 452.061 183.782 452.790 185.251  c
456.368 192.501 l
449.368 192.501 l
446.259 186.157 l
445.624 184.887 444.986 184.017 444.345 183.548  c
443.704 183.079 442.848 182.845 441.775 182.845  c
439.915 182.845 l
h
457.241 166.986 m
480.757 166.986 l
480.757 171.954 l
472.303 171.954 l
472.303 192.501 l
465.710 192.501 l
465.710 171.954 l
457.241 171.954 l
457.241 166.986 l
h
484.162 166.986 m
490.740 166.986 l
490.740 187.532 l
502.287 187.532 l
502.287 192.501 l
484.162 192.501 l
484.162 166.986 l
h
f
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
240.000 109.000 m
240.000 251.000 l
240.000 253.209 241.791 255.000 244.000 255.000  c
536.000 255.000 l
538.209 255.000 540.000 253.209 540.000 251.000  c
540.000 109.000 l
540.000 106.791 538.209 105.000 536.000 105.000  c
244.000 105.000 l
241.791 105.000 240.000 106.791 240.000 109.000  c
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
q
[ 1.00000 0.00000 0.00000 1.00000 899.000 151.000 ] concat
0 0 62 58 rc
q
q
newpath
3.21875 8.48438 m
9.79688 8.48438 l
9.79688 34.0000 l
3.21875 34.0000 l
3.21875 8.48438 l
h
16.2412 8.48438 m
27.1631 8.48438 l
30.4027 8.48438 32.8923 9.20573 34.6318 10.6484  c
36.3714 12.0911 37.2412 14.1458 37.2412 16.8125  c
37.2412 19.4896 36.3714 21.5469 34.6318 22.9844  c
32.8923 24.4219 30.4027 25.1406 27.1631 25.1406  c
22.8193 25.1406 l
22.8193 34.0000 l
16.2412 34.0000 l
16.2412 8.48438 l
h
22.8193 13.2500 m
22.8193 20.3750 l
26.4600 20.3750 l
27.7308 20.3750 28.7152 20.0651 29.4131 19.4453  c
30.1110 18.8255 30.4600 17.9479 30.4600 16.8125  c
30.4600 15.6667 30.1110 14.7865 29.4131 14.1719  c
28.7152 13.5573 27.7308 13.2500 26.4600 13.2500  c
22.8193 13.2500 l
h
f
newpath
42.8750 45.7188 m
48.3438 45.7188 l
48.3438 30.1719 l
42.7188 31.3281 l
42.7188 27.1094 l
48.3125 25.9375 l
54.2188 25.9375 l
54.2188 45.7188 l
59.6875 45.7188 l
59.6875 50.0000 l
42.8750 50.0000 l
42.8750 45.7188 l
h
f
Q
Q
Q
2 J
10.0000 M
3.00000 w
1 J
1.45000 M
[ 12.0000 9.00000 0.00000 9.00000 ] 0.00000 d
newpath
880.000 144.000 m
880.000 216.000 l
880.000 218.209 881.791 220.000 884.000 220.000  c
976.000 220.000 l
978.209 220.000 980.000 218.209 980.000 216.000  c
980.000 144.000 l
980.000 141.791 978.209 140.000 976.000 140.000  c
884.000 140.000 l
881.791 140.000 880.000 141.791 880.000 144.000  c
h
S
1.00000 w
2 J
10.0000 M
[ ] 0.00000 d
2.00000 w
1 J
1.45000 M
[ 8.00000 6.00000 0.00000 6.00000 ] 0.00000 d
newpath
539.996 180.000 m
867.589 180.000 l
S
newpath
879.964 180.000 m
866.464 173.250 l
866.464 186.750 l
h
f
1.00000 w
0 J
[ ] 0.00000 d
newpath
677.275 115.756 m
677.275 118.881 l
676.275 117.954 675.210 117.261 674.080 116.803  c
672.949 116.344 671.754 116.115 670.494 116.115  c
667.994 116.115 666.080 116.878 664.751 118.404  c
663.423 119.930 662.759 122.141 662.759 125.037  c
662.759 127.912 663.423 130.115 664.751 131.646  c
666.080 133.178 667.994 133.943 670.494 133.943  c
671.754 133.943 672.949 133.712 674.080 133.248  c
675.210 132.785 676.275 132.089 677.275 131.162  c
677.275 134.256 l
676.233 134.964 675.134 135.493 673.978 135.842  c
672.822 136.191 671.598 136.365 670.306 136.365  c
666.994 136.365 664.387 135.352 662.486 133.326  c
660.585 131.300 659.634 128.537 659.634 125.037  c
659.634 121.516 660.585 118.743 662.486 116.717  c
664.387 114.691 666.994 113.678 670.306 113.678  c
671.619 113.678 672.853 113.852 674.009 114.201  c
675.166 114.550 676.254 115.068 677.275 115.756  c
h
688.082 121.428 m
686.634 121.428 685.490 121.990 684.652 123.115  c
683.813 124.240 683.394 125.787 683.394 127.756  c
683.394 129.714 683.811 131.258 684.644 132.389  c
685.477 133.519 686.623 134.084 688.082 134.084  c
689.519 134.084 690.657 133.516 691.496 132.381  c
692.334 131.245 692.753 129.704 692.753 127.756  c
692.753 125.808 692.334 124.266 691.496 123.131  c
690.657 121.995 689.519 121.428 688.082 121.428  c
h
688.082 119.146 m
690.425 119.146 692.266 119.907 693.605 121.428  c
694.944 122.949 695.613 125.058 695.613 127.756  c
695.613 130.443 694.944 132.550 693.605 134.076  c
692.266 135.602 690.425 136.365 688.082 136.365  c
685.727 136.365 683.884 135.602 682.550 134.076  c
681.217 132.550 680.550 130.443 680.550 127.756  c
680.550 125.058 681.217 122.949 682.550 121.428  c
683.884 119.907 685.727 119.146 688.082 119.146  c
h
712.842 122.693 m
713.519 121.475 714.327 120.579 715.264 120.006  c
716.202 119.433 717.306 119.146 718.577 119.146  c
720.285 119.146 721.603 119.743 722.530 120.936  c
723.457 122.128 723.920 123.829 723.920 126.037  c
723.920 135.943 l
721.217 135.943 l
721.217 126.131 l
721.217 124.558 720.939 123.391 720.381 122.631  c
719.824 121.870 718.972 121.490 717.827 121.490  c
716.431 121.490 715.329 121.954 714.522 122.881  c
713.715 123.808 713.311 125.074 713.311 126.678  c
713.311 135.943 l
710.592 135.943 l
710.592 126.131 l
710.592 124.548 710.314 123.378 709.756 122.623  c
709.199 121.868 708.342 121.490 707.186 121.490  c
705.801 121.490 704.704 121.956 703.897 122.889  c
703.090 123.821 702.686 125.084 702.686 126.678  c
702.686 135.943 l
699.967 135.943 l
699.967 119.537 l
702.686 119.537 l
702.686 122.084 l
703.301 121.084 704.038 120.344 704.897 119.865  c
705.756 119.386 706.775 119.146 707.952 119.146  c
709.150 119.146 710.165 119.449 710.999 120.053  c
711.832 120.657 712.446 121.537 712.842 122.693  c
h
731.910 133.475 m
731.910 142.178 l
729.191 142.178 l
729.191 119.537 l
731.910 119.537 l
731.910 122.021 l
732.472 121.053 733.186 120.331 734.050 119.857  c
734.915 119.383 735.946 119.146 737.144 119.146  c
739.144 119.146 740.766 119.936 742.011 121.514  c
743.256 123.092 743.878 125.173 743.878 127.756  c
743.878 130.329 743.256 132.407 742.011 133.990  c
740.766 135.574 739.144 136.365 737.144 136.365  c
735.946 136.365 734.915 136.128 734.050 135.654  c
733.186 135.180 732.472 134.454 731.910 133.475  c
h
741.082 127.756 m
741.082 125.777 740.673 124.222 739.855 123.092  c
739.037 121.962 737.915 121.396 736.488 121.396  c
735.061 121.396 733.941 121.962 733.128 123.092  c
732.316 124.222 731.910 125.777 731.910 127.756  c
731.910 129.735 732.316 131.290 733.128 132.420  c
733.941 133.550 735.061 134.115 736.488 134.115  c
737.915 134.115 739.037 133.550 739.855 132.420  c
740.673 131.290 741.082 129.735 741.082 127.756  c
h
748.343 119.537 m
751.031 119.537 l
751.031 135.943 l
748.343 135.943 l
748.343 119.537 l
h
748.343 113.146 m
751.031 113.146 l
751.031 116.568 l
748.343 116.568 l
748.343 113.146 l
h
756.678 113.146 m
759.366 113.146 l
759.366 135.943 l
756.678 135.943 l
756.678 113.146 l
h
779.044 127.068 m
779.044 128.381 l
766.654 128.381 l
766.768 130.235 767.326 131.649 768.326 132.623  c
769.326 133.597 770.722 134.084 772.513 134.084  c
773.544 134.084 774.547 133.956 775.521 133.701  c
776.495 133.446 777.461 133.063 778.419 132.553  c
778.419 135.115 l
777.451 135.521 776.458 135.831 775.443 136.045  c
774.427 136.258 773.399 136.365 772.357 136.365  c
769.732 136.365 767.656 135.605 766.130 134.084  c
764.604 132.563 763.841 130.501 763.841 127.896  c
763.841 125.209 764.565 123.079 766.013 121.506  c
767.461 119.933 769.419 119.146 771.888 119.146  c
774.097 119.146 775.841 119.855 777.123 121.271  c
778.404 122.688 779.044 124.620 779.044 127.068  c
h
776.357 126.271 m
776.336 124.803 775.922 123.628 775.115 122.748  c
774.307 121.868 773.242 121.428 771.919 121.428  c
770.409 121.428 769.203 121.852 768.302 122.701  c
767.401 123.550 766.883 124.745 766.748 126.287  c
776.357 126.271 l
h
784.158 132.225 m
787.251 132.225 l
787.251 134.740 l
784.845 139.428 l
782.955 139.428 l
784.158 134.740 l
784.158 132.225 l
h
f
newpath
669.080 150.368 m
669.080 153.259 l
667.955 152.717 666.893 152.316 665.893 152.056  c
664.893 151.795 663.929 151.665 663.002 151.665  c
661.398 151.665 660.158 151.978 659.283 152.603  c
658.408 153.228 657.971 154.113 657.971 155.259  c
657.971 156.228 658.260 156.959 658.838 157.454  c
659.416 157.949 660.518 158.347 662.143 158.649  c
663.924 159.009 l
666.132 159.436 667.762 160.178 668.814 161.235  c
669.867 162.293 670.393 163.712 670.393 165.493  c
670.393 167.608 669.682 169.212 668.260 170.306  c
666.838 171.399 664.757 171.946 662.018 171.946  c
660.976 171.946 659.872 171.829 658.705 171.595  c
657.538 171.360 656.330 171.014 655.080 170.556  c
655.080 167.509 l
656.288 168.186 657.468 168.694 658.619 169.032  c
659.770 169.371 660.903 169.540 662.018 169.540  c
663.705 169.540 665.007 169.209 665.924 168.548  c
666.840 167.886 667.299 166.941 667.299 165.712  c
667.299 164.639 666.971 163.798 666.314 163.188  c
665.658 162.579 664.575 162.123 663.064 161.821  c
661.268 161.478 l
659.059 161.040 657.463 160.353 656.479 159.415  c
655.494 158.478 655.002 157.170 655.002 155.493  c
655.002 153.566 655.682 152.045 657.041 150.931  c
658.400 149.816 660.278 149.259 662.674 149.259  c
663.695 149.259 664.739 149.353 665.807 149.540  c
666.874 149.728 667.965 150.004 669.080 150.368  c
h
674.889 155.118 m
677.576 155.118 l
677.576 171.524 l
674.889 171.524 l
674.889 155.118 l
h
674.889 148.728 m
677.576 148.728 l
677.576 152.149 l
674.889 152.149 l
674.889 148.728 l
h
695.989 158.274 m
696.666 157.056 697.474 156.160 698.411 155.587  c
699.349 155.014 700.453 154.728 701.724 154.728  c
703.432 154.728 704.750 155.324 705.677 156.517  c
706.604 157.709 707.067 159.410 707.067 161.618  c
707.067 171.524 l
704.364 171.524 l
704.364 161.712 l
704.364 160.139 704.086 158.972 703.528 158.212  c
702.971 157.451 702.119 157.071 700.974 157.071  c
699.578 157.071 698.476 157.535 697.669 158.462  c
696.862 159.389 696.458 160.655 696.458 162.259  c
696.458 171.524 l
693.739 171.524 l
693.739 161.712 l
693.739 160.129 693.461 158.959 692.903 158.204  c
692.346 157.449 691.489 157.071 690.333 157.071  c
688.948 157.071 687.851 157.537 687.044 158.470  c
686.237 159.402 685.833 160.665 685.833 162.259  c
685.833 171.524 l
683.114 171.524 l
683.114 155.118 l
685.833 155.118 l
685.833 157.665 l
686.448 156.665 687.185 155.925 688.044 155.446  c
688.903 154.967 689.922 154.728 691.099 154.728  c
692.297 154.728 693.312 155.030 694.146 155.634  c
694.979 156.238 695.593 157.118 695.989 158.274  c
h
712.166 165.056 m
712.166 155.118 l
714.869 155.118 l
714.869 164.946 l
714.869 166.498 715.171 167.662 715.775 168.438  c
716.380 169.215 717.286 169.603 718.494 169.603  c
719.952 169.603 721.104 169.139 721.947 168.212  c
722.791 167.285 723.213 166.019 723.213 164.415  c
723.213 155.118 l
725.916 155.118 l
725.916 171.524 l
723.213 171.524 l
723.213 169.009 l
722.557 169.998 721.796 170.735 720.932 171.220  c
720.067 171.704 719.067 171.946 717.932 171.946  c
716.046 171.946 714.614 171.360 713.635 170.188  c
712.656 169.017 712.166 167.306 712.166 165.056  c
h
731.461 148.728 m
734.148 148.728 l
734.148 171.524 l
731.461 171.524 l
731.461 148.728 l
h
747.249 163.274 m
745.072 163.274 743.564 163.524 742.726 164.024  c
741.887 164.524 741.468 165.373 741.468 166.571  c
741.468 167.530 741.783 168.290 742.413 168.853  c
743.043 169.415 743.900 169.696 744.983 169.696  c
746.473 169.696 747.671 169.165 748.577 168.103  c
749.483 167.040 749.937 165.634 749.937 163.884  c
749.937 163.274 l
747.249 163.274 l
h
752.624 162.165 m
752.624 171.524 l
749.937 171.524 l
749.937 169.040 l
749.322 170.030 748.554 170.761 747.632 171.235  c
746.710 171.709 745.588 171.946 744.265 171.946  c
742.588 171.946 741.252 171.475 740.257 170.532  c
739.262 169.590 738.765 168.326 738.765 166.743  c
738.765 164.899 739.384 163.509 740.624 162.571  c
741.864 161.634 743.707 161.165 746.155 161.165  c
749.937 161.165 l
749.937 160.899 l
749.937 159.660 749.528 158.701 748.710 158.024  c
747.892 157.347 746.749 157.009 745.280 157.009  c
744.343 157.009 743.429 157.121 742.538 157.345  c
741.647 157.569 740.791 157.905 739.968 158.353  c
739.968 155.868 l
740.957 155.483 741.916 155.196 742.843 155.009  c
743.770 154.821 744.671 154.728 745.546 154.728  c
747.921 154.728 749.694 155.342 750.866 156.571  c
752.038 157.800 752.624 159.665 752.624 162.165  c
h
760.852 150.462 m
760.852 155.118 l
766.398 155.118 l
766.398 157.212 l
760.852 157.212 l
760.852 166.118 l
760.852 167.451 761.034 168.311 761.398 168.696  c
761.763 169.082 762.508 169.274 763.633 169.274  c
766.398 169.274 l
766.398 171.524 l
763.633 171.524 l
761.549 171.524 760.112 171.136 759.320 170.360  c
758.529 169.584 758.133 168.170 758.133 166.118  c
758.133 157.212 l
756.164 157.212 l
756.164 155.118 l
758.133 155.118 l
758.133 150.462 l
760.852 150.462 l
h
783.974 162.649 m
783.974 163.962 l
771.583 163.962 l
771.698 165.816 772.255 167.230 773.255 168.204  c
774.255 169.178 775.651 169.665 777.442 169.665  c
778.474 169.665 779.476 169.537 780.450 169.282  c
781.424 169.027 782.390 168.644 783.349 168.134  c
783.349 170.696 l
782.380 171.103 781.388 171.412 780.372 171.626  c
779.356 171.840 778.328 171.946 777.286 171.946  c
774.661 171.946 772.586 171.186 771.060 169.665  c
769.534 168.144 768.771 166.082 768.771 163.478  c
768.771 160.790 769.494 158.660 770.942 157.087  c
772.390 155.514 774.349 154.728 776.817 154.728  c
779.026 154.728 780.771 155.436 782.052 156.853  c
783.333 158.269 783.974 160.201 783.974 162.649  c
h
781.286 161.853 m
781.265 160.384 780.851 159.209 780.044 158.329  c
779.237 157.449 778.172 157.009 776.849 157.009  c
775.338 157.009 774.132 157.433 773.231 158.282  c
772.330 159.131 771.812 160.326 771.677 161.868  c
781.286 161.853 l
h
789.087 167.806 m
792.181 167.806 l
792.181 170.321 l
789.774 175.009 l
787.884 175.009 l
789.087 170.321 l
789.087 167.806 l
h
f
newpath
667.806 185.949 m
667.806 188.840 l
666.681 188.298 665.618 187.897 664.618 187.637  c
663.618 187.376 662.655 187.246 661.728 187.246  c
660.123 187.246 658.884 187.559 658.009 188.184  c
657.134 188.809 656.696 189.694 656.696 190.840  c
656.696 191.809 656.985 192.540 657.563 193.035  c
658.142 193.530 659.243 193.928 660.868 194.230  c
662.649 194.590 l
664.858 195.017 666.488 195.759 667.540 196.816  c
668.592 197.874 669.118 199.293 669.118 201.074  c
669.118 203.189 668.407 204.793 666.985 205.887  c
665.563 206.980 663.483 207.527 660.743 207.527  c
659.701 207.527 658.597 207.410 657.431 207.176  c
656.264 206.941 655.056 206.595 653.806 206.137  c
653.806 203.090 l
655.014 203.767 656.194 204.275 657.345 204.613  c
658.496 204.952 659.629 205.121 660.743 205.121  c
662.431 205.121 663.733 204.790 664.649 204.129  c
665.566 203.467 666.024 202.522 666.024 201.293  c
666.024 200.220 665.696 199.379 665.040 198.770  c
664.384 198.160 663.300 197.704 661.790 197.402  c
659.993 197.059 l
657.785 196.621 656.188 195.934 655.204 194.996  c
654.220 194.059 653.728 192.751 653.728 191.074  c
653.728 189.147 654.407 187.626 655.767 186.512  c
657.126 185.397 659.004 184.840 661.399 184.840  c
662.420 184.840 663.465 184.934 664.532 185.121  c
665.600 185.309 666.691 185.585 667.806 185.949  c
h
680.442 208.637 m
679.682 210.585 678.940 211.855 678.216 212.449  c
677.492 213.043 676.526 213.340 675.317 213.340  c
673.161 213.340 l
673.161 211.090 l
674.739 211.090 l
675.479 211.090 676.054 210.915 676.466 210.566  c
676.877 210.217 677.333 209.387 677.833 208.074  c
678.317 206.840 l
671.677 190.699 l
674.536 190.699 l
679.661 203.527 l
684.786 190.699 l
687.646 190.699 l
680.442 208.637 l
h
705.009 197.199 m
705.009 207.105 l
702.306 207.105 l
702.306 197.293 l
702.306 195.741 702.004 194.579 701.399 193.809  c
700.795 193.038 699.889 192.652 698.681 192.652  c
697.222 192.652 696.074 193.116 695.235 194.043  c
694.397 194.970 693.978 196.236 693.978 197.840  c
693.978 207.105 l
691.259 207.105 l
691.259 190.699 l
693.978 190.699 l
693.978 193.246 l
694.623 192.257 695.384 191.520 696.259 191.035  c
697.134 190.551 698.139 190.309 699.274 190.309  c
701.160 190.309 702.587 190.892 703.556 192.059  c
704.524 193.225 705.009 194.939 705.009 197.199  c
h
713.054 186.043 m
713.054 190.699 l
718.601 190.699 l
718.601 192.793 l
713.054 192.793 l
713.054 201.699 l
713.054 203.033 713.236 203.892 713.601 204.277  c
713.965 204.663 714.710 204.855 715.835 204.855  c
718.601 204.855 l
718.601 207.105 l
715.835 207.105 l
713.752 207.105 712.314 206.717 711.522 205.941  c
710.731 205.165 710.335 203.751 710.335 201.699  c
710.335 192.793 l
708.366 192.793 l
708.366 190.699 l
710.335 190.699 l
710.335 186.043 l
713.054 186.043 l
h
735.785 197.199 m
735.785 207.105 l
733.082 207.105 l
733.082 197.293 l
733.082 195.741 732.780 194.579 732.176 193.809  c
731.572 193.038 730.665 192.652 729.457 192.652  c
727.999 192.652 726.850 193.116 726.012 194.043  c
725.173 194.970 724.754 196.236 724.754 197.840  c
724.754 207.105 l
722.035 207.105 l
722.035 184.309 l
724.754 184.309 l
724.754 193.246 l
725.400 192.257 726.160 191.520 727.035 191.035  c
727.910 190.551 728.915 190.309 730.051 190.309  c
731.936 190.309 733.363 190.892 734.332 192.059  c
735.301 193.225 735.785 194.939 735.785 197.199  c
h
755.189 198.230 m
755.189 199.543 l
742.799 199.543 l
742.913 201.397 743.471 202.811 744.471 203.785  c
745.471 204.759 746.867 205.246 748.658 205.246  c
749.689 205.246 750.692 205.118 751.666 204.863  c
752.640 204.608 753.606 204.225 754.564 203.715  c
754.564 206.277 l
753.596 206.684 752.604 206.993 751.588 207.207  c
750.572 207.421 749.544 207.527 748.502 207.527  c
745.877 207.527 743.801 206.767 742.275 205.246  c
740.749 203.725 739.986 201.663 739.986 199.059  c
739.986 196.371 740.710 194.241 742.158 192.668  c
743.606 191.095 745.564 190.309 748.033 190.309  c
750.242 190.309 751.986 191.017 753.268 192.434  c
754.549 193.850 755.189 195.783 755.189 198.230  c
h
752.502 197.434 m
752.481 195.965 752.067 194.790 751.260 193.910  c
750.452 193.030 749.387 192.590 748.064 192.590  c
746.554 192.590 745.348 193.014 744.447 193.863  c
743.546 194.712 743.028 195.908 742.893 197.449  c
752.502 197.434 l
h
770.068 191.184 m
770.068 193.730 l
769.308 193.345 768.519 193.053 767.701 192.855  c
766.883 192.658 766.032 192.559 765.146 192.559  c
763.813 192.559 762.811 192.764 762.139 193.176  c
761.467 193.587 761.131 194.204 761.131 195.027  c
761.131 195.652 761.370 196.142 761.850 196.496  c
762.329 196.850 763.292 197.189 764.740 197.512  c
765.662 197.715 l
767.579 198.121 768.941 198.699 769.748 199.449  c
770.555 200.199 770.959 201.241 770.959 202.574  c
770.959 204.105 770.355 205.314 769.146 206.199  c
767.938 207.085 766.282 207.527 764.178 207.527  c
763.292 207.527 762.373 207.441 761.420 207.270  c
760.467 207.098 759.464 206.845 758.412 206.512  c
758.412 203.715 l
759.412 204.236 760.394 204.626 761.357 204.887  c
762.321 205.147 763.277 205.277 764.225 205.277  c
765.495 205.277 766.472 205.059 767.154 204.621  c
767.837 204.184 768.178 203.569 768.178 202.777  c
768.178 202.048 767.933 201.488 767.443 201.098  c
766.954 200.707 765.870 200.329 764.193 199.965  c
763.256 199.746 l
761.589 199.402 760.386 198.866 759.646 198.137  c
758.907 197.408 758.537 196.408 758.537 195.137  c
758.537 193.595 759.084 192.405 760.178 191.566  c
761.271 190.728 762.824 190.309 764.834 190.309  c
765.824 190.309 766.758 190.382 767.639 190.527  c
768.519 190.673 769.329 190.892 770.068 191.184  c
h
775.245 190.699 m
777.933 190.699 l
777.933 207.105 l
775.245 207.105 l
775.245 190.699 l
h
775.245 184.309 m
777.933 184.309 l
777.933 187.730 l
775.245 187.730 l
775.245 184.309 l
h
794.033 191.184 m
794.033 193.730 l
793.273 193.345 792.484 193.053 791.666 192.855  c
790.848 192.658 789.997 192.559 789.111 192.559  c
787.778 192.559 786.775 192.764 786.104 193.176  c
785.432 193.587 785.096 194.204 785.096 195.027  c
785.096 195.652 785.335 196.142 785.814 196.496  c
786.294 196.850 787.257 197.189 788.705 197.512  c
789.627 197.715 l
791.544 198.121 792.906 198.699 793.713 199.449  c
794.520 200.199 794.924 201.241 794.924 202.574  c
794.924 204.105 794.320 205.314 793.111 206.199  c
791.903 207.085 790.247 207.527 788.143 207.527  c
787.257 207.527 786.338 207.441 785.385 207.270  c
784.432 207.098 783.429 206.845 782.377 206.512  c
782.377 203.715 l
783.377 204.236 784.359 204.626 785.322 204.887  c
786.286 205.147 787.242 205.277 788.189 205.277  c
789.460 205.277 790.437 205.059 791.119 204.621  c
791.801 204.184 792.143 203.569 792.143 202.777  c
792.143 202.048 791.898 201.488 791.408 201.098  c
790.919 200.707 789.835 200.329 788.158 199.965  c
787.221 199.746 l
785.554 199.402 784.351 198.866 783.611 198.137  c
782.872 197.408 782.502 196.408 782.502 195.137  c
782.502 193.595 783.049 192.405 784.143 191.566  c
785.236 190.728 786.788 190.309 788.799 190.309  c
789.788 190.309 790.723 190.382 791.604 190.527  c
792.484 190.673 793.294 190.892 794.033 191.184  c
h
f
newpath
712.961 238.968 m
716.055 238.968 l
716.055 242.687 l
712.961 242.687 l
712.961 238.968 l
h
722.498 238.968 m
725.591 238.968 l
725.591 242.687 l
722.498 242.687 l
722.498 238.968 l
h
732.034 238.968 m
735.127 238.968 l
735.127 242.687 l
732.034 242.687 l
732.034 238.968 l
h
f
2.00000 w
1 J
[ 8.00000 6.00000 0.00000 6.00000 ] 0.00000 d
1.00000 w
2 J
10.0000 M
[ ] 0.00000 d
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
