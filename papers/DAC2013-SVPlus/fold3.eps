%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 276 575 515
%%Creator: yExport 1.2
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Saturday, November 24, 2012 3:12:00 PM CST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
495 212 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
495.000 0.00000 l
495.000 212.000 l
0.00000 212.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 495 212 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 15.0000 17.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
-15.0000 -17.0000 m
480.000 -17.0000 l
480.000 195.000 l
-15.0000 195.000 l
-15.0000 -17.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 15.0000 17.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 15.0000 17.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 15.0000 17.0000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
q
[ 1.00000 0.00000 0.00000 1.00000 3.00000 0.00000 ] concat
0 0 84 30 rc
q
q
newpath
9.64062 5.31250 m
9.64062 7.04688 l
8.96354 6.72396 8.32552 6.48177 7.72656 6.32031  c
7.12760 6.15885 6.55208 6.07812 6.00000 6.07812  c
5.03125 6.07812 4.28385 6.26562 3.75781 6.64062  c
3.23177 7.01562 2.96875 7.55208 2.96875 8.25000  c
2.96875 8.82292 3.14323 9.25781 3.49219 9.55469  c
3.84115 9.85156 4.50000 10.0938 5.46875 10.2812  c
6.54688 10.5000 l
7.86979 10.7500 8.84635 11.1927 9.47656 11.8281  c
10.1068 12.4635 10.4219 13.3125 10.4219 14.3750  c
10.4219 15.6458 9.99479 16.6094 9.14062 17.2656  c
8.28646 17.9219 7.03646 18.2500 5.39062 18.2500  c
4.77604 18.2500 4.11719 18.1797 3.41406 18.0391  c
2.71094 17.8984 1.98438 17.6927 1.23438 17.4219  c
1.23438 15.5938 l
1.96354 16.0000 2.67188 16.3047 3.35938 16.5078  c
4.04688 16.7109 4.72396 16.8125 5.39062 16.8125  c
6.41146 16.8125 7.19531 16.6146 7.74219 16.2188  c
8.28906 15.8229 8.56250 15.2552 8.56250 14.5156  c
8.56250 13.8698 8.36719 13.3646 7.97656 13.0000  c
7.58594 12.6354 6.93750 12.3646 6.03125 12.1875  c
4.95312 11.9688 l
3.63021 11.7083 2.67188 11.2969 2.07812 10.7344  c
1.48438 10.1719 1.18750 9.39062 1.18750 8.39062  c
1.18750 7.22396 1.59635 6.30729 2.41406 5.64062  c
3.23177 4.97396 4.35938 4.64062 5.79688 4.64062  c
6.41146 4.64062 7.03646 4.69531 7.67188 4.80469  c
8.30729 4.91406 8.96354 5.08333 9.64062 5.31250  c
h
f
newpath
19.7812 20.7188 m
19.7812 26.0000 l
18.3438 26.0000 l
18.3438 20.7656 l
18.3438 19.9323 18.1823 19.3099 17.8594 18.8984  c
17.5365 18.4870 17.0521 18.2812 16.4062 18.2812  c
15.6354 18.2812 15.0260 18.5286 14.5781 19.0234  c
14.1302 19.5182 13.9062 20.1927 13.9062 21.0469  c
13.9062 26.0000 l
12.4531 26.0000 l
12.4531 17.2500 l
13.9062 17.2500 l
13.9062 18.6094 l
14.2500 18.0781 14.6536 17.6823 15.1172 17.4219  c
15.5807 17.1615 16.1198 17.0312 16.7344 17.0312  c
17.7344 17.0312 18.4922 17.3438 19.0078 17.9688  c
19.5234 18.5938 19.7812 19.5104 19.7812 20.7188  c
h
f
newpath
23.1094 15.7656 m
24.9688 15.7656 l
24.9688 17.2812 l
23.5156 20.0938 l
22.3906 20.0938 l
23.1094 17.2812 l
23.1094 15.7656 l
h
34.3652 15.7656 m
36.2246 15.7656 l
36.2246 18.0000 l
34.3652 18.0000 l
34.3652 15.7656 l
h
40.0869 15.7656 m
41.9463 15.7656 l
41.9463 18.0000 l
40.0869 18.0000 l
40.0869 15.7656 l
h
45.8086 15.7656 m
47.6680 15.7656 l
47.6680 18.0000 l
45.8086 18.0000 l
45.8086 15.7656 l
h
51.7178 15.7656 m
53.5771 15.7656 l
53.5771 17.2812 l
52.1240 20.0938 l
50.9990 20.0938 l
51.7178 17.2812 l
51.7178 15.7656 l
h
70.6924 5.31250 m
70.6924 7.04688 l
70.0153 6.72396 69.3773 6.48177 68.7783 6.32031  c
68.1794 6.15885 67.6038 6.07812 67.0518 6.07812  c
66.0830 6.07812 65.3356 6.26562 64.8096 6.64062  c
64.2835 7.01562 64.0205 7.55208 64.0205 8.25000  c
64.0205 8.82292 64.1950 9.25781 64.5439 9.55469  c
64.8929 9.85156 65.5518 10.0938 66.5205 10.2812  c
67.5986 10.5000 l
68.9215 10.7500 69.8981 11.1927 70.5283 11.8281  c
71.1585 12.4635 71.4736 13.3125 71.4736 14.3750  c
71.4736 15.6458 71.0465 16.6094 70.1924 17.2656  c
69.3382 17.9219 68.0882 18.2500 66.4424 18.2500  c
65.8278 18.2500 65.1689 18.1797 64.4658 18.0391  c
63.7627 17.8984 63.0361 17.6927 62.2861 17.4219  c
62.2861 15.5938 l
63.0153 16.0000 63.7236 16.3047 64.4111 16.5078  c
65.0986 16.7109 65.7757 16.8125 66.4424 16.8125  c
67.4632 16.8125 68.2471 16.6146 68.7939 16.2188  c
69.3408 15.8229 69.6143 15.2552 69.6143 14.5156  c
69.6143 13.8698 69.4189 13.3646 69.0283 13.0000  c
68.6377 12.6354 67.9893 12.3646 67.0830 12.1875  c
66.0049 11.9688 l
64.6820 11.7083 63.7236 11.2969 63.1299 10.7344  c
62.5361 10.1719 62.2393 9.39062 62.2393 8.39062  c
62.2393 7.22396 62.6481 6.30729 63.4658 5.64062  c
64.2835 4.97396 65.4111 4.64062 66.8486 4.64062  c
67.4632 4.64062 68.0882 4.69531 68.7236 4.80469  c
69.3590 4.91406 70.0153 5.08333 70.6924 5.31250  c
h
f
newpath
79.0938 15.3750 m
78.2812 15.3750 77.6693 15.7734 77.2578 16.5703  c
76.8464 17.3672 76.6406 18.5677 76.6406 20.1719  c
76.6406 21.7760 76.8464 22.9766 77.2578 23.7734  c
77.6693 24.5703 78.2812 24.9688 79.0938 24.9688  c
79.9062 24.9688 80.5182 24.5703 80.9297 23.7734  c
81.3411 22.9766 81.5469 21.7760 81.5469 20.1719  c
81.5469 18.5677 81.3411 17.3672 80.9297 16.5703  c
80.5182 15.7734 79.9062 15.3750 79.0938 15.3750  c
h
79.0938 14.1250 m
80.3958 14.1250 81.3932 14.6406 82.0859 15.6719  c
82.7786 16.7031 83.1250 18.2031 83.1250 20.1719  c
83.1250 22.1406 82.7786 23.6432 82.0859 24.6797  c
81.3932 25.7161 80.3958 26.2344 79.0938 26.2344  c
77.7812 26.2344 76.7812 25.7161 76.0938 24.6797  c
75.4062 23.6432 75.0625 22.1406 75.0625 20.1719  c
75.0625 18.2031 75.4062 16.7031 76.0938 15.6719  c
76.7812 14.6406 77.7812 14.1250 79.0938 14.1250  c
h
f
Q
Q
Q
2 J
10.0000 M
0 J
1.45000 M
newpath
30.9897 51.5854 m
32.7085 51.5854 l
35.7866 59.8511 l
38.8647 51.5854 l
40.5679 51.5854 l
36.8804 61.4292 l
34.6929 61.4292 l
30.9897 51.5854 l
h
47.2827 56.4761 m
45.9702 56.4761 45.0640 56.6271 44.5640 56.9292  c
44.0640 57.2313 43.8140 57.7417 43.8140 58.4604  c
43.8140 59.0334 44.0015 59.4891 44.3765 59.8276  c
44.7515 60.1662 45.2671 60.3354 45.9233 60.3354  c
46.8192 60.3354 47.5379 60.0177 48.0796 59.3823  c
48.6213 58.7469 48.8921 57.8979 48.8921 56.8354  c
48.8921 56.4761 l
47.2827 56.4761 l
h
50.5015 55.8198 m
50.5015 61.4292 l
48.8921 61.4292 l
48.8921 59.9292 l
48.5171 60.5334 48.0562 60.9761 47.5093 61.2573  c
46.9624 61.5386 46.2879 61.6792 45.4858 61.6792  c
44.4754 61.6792 43.6733 61.3979 43.0796 60.8354  c
42.4858 60.2729 42.1890 59.5177 42.1890 58.5698  c
42.1890 57.4552 42.5614 56.6167 43.3062 56.0542  c
44.0509 55.4917 45.1577 55.2104 46.6265 55.2104  c
48.8921 55.2104 l
48.8921 55.0542 l
48.8921 54.3146 48.6473 53.7417 48.1577 53.3354  c
47.6681 52.9292 46.9806 52.7261 46.0952 52.7261  c
45.5327 52.7261 44.9858 52.7912 44.4546 52.9214  c
43.9233 53.0516 43.4077 53.2521 42.9077 53.5229  c
42.9077 52.0386 l
43.5015 51.8094 44.0770 51.6375 44.6343 51.5229  c
45.1916 51.4084 45.7358 51.3511 46.2671 51.3511  c
47.6838 51.3511 48.7437 51.7209 49.4468 52.4604  c
50.1499 53.2000 50.5015 54.3198 50.5015 55.8198  c
h
59.5474 53.1011 m
59.3599 52.9969 59.1593 52.9188 58.9458 52.8667  c
58.7323 52.8146 58.4953 52.7886 58.2349 52.7886  c
57.3286 52.7886 56.6307 53.0854 56.1411 53.6792  c
55.6515 54.2729 55.4067 55.1271 55.4067 56.2417  c
55.4067 61.4292 l
53.7817 61.4292 l
53.7817 51.5854 l
55.4067 51.5854 l
55.4067 53.1167 l
55.7401 52.5125 56.1802 52.0672 56.7271 51.7808  c
57.2739 51.4943 57.9380 51.3511 58.7192 51.3511  c
58.8234 51.3511 58.9432 51.3589 59.0786 51.3745  c
59.2140 51.3901 59.3651 51.4084 59.5317 51.4292  c
59.5474 53.1011 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
154.032 47.4147 m
136.251 39.3679 l
136.251 37.0554 l
154.032 29.0085 l
154.032 31.5241 l
139.329 38.2116 l
154.032 44.8991 l
154.032 47.4147 l
h
173.766 47.4147 m
155.984 39.3679 l
155.984 37.0554 l
173.766 29.0085 l
173.766 31.5241 l
159.062 38.2116 l
173.766 44.8991 l
173.766 47.4147 l
h
f
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
125.000 0.00000 m
185.000 0.00000 l
185.000 70.0000 l
125.000 70.0000 l
125.000 0.00000 l
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
254.603 74.5029 m
251.915 81.7686 l
257.274 81.7686 l
254.603 74.5029 l
h
253.478 72.5654 m
255.712 72.5654 l
261.274 87.1436 l
259.228 87.1436 l
257.899 83.4092 l
251.321 83.4092 l
249.993 87.1436 l
247.915 87.1436 l
253.478 72.5654 l
h
265.378 74.1904 m
265.378 85.5186 l
267.753 85.5186 l
269.774 85.5186 271.250 85.0628 272.183 84.1514  c
273.115 83.2399 273.581 81.7998 273.581 79.8311  c
273.581 77.8831 273.115 76.4561 272.183 75.5498  c
271.250 74.6436 269.774 74.1904 267.753 74.1904  c
265.378 74.1904 l
h
263.409 72.5654 m
267.456 72.5654 l
270.279 72.5654 272.352 73.1514 273.675 74.3232  c
274.998 75.4951 275.659 77.3311 275.659 79.8311  c
275.659 82.3519 274.995 84.2008 273.667 85.3779  c
272.339 86.5550 270.269 87.1436 267.456 87.1436  c
263.409 87.1436 l
263.409 72.5654 l
h
280.778 74.1904 m
280.778 85.5186 l
283.153 85.5186 l
285.174 85.5186 286.651 85.0628 287.583 84.1514  c
288.515 83.2399 288.981 81.7998 288.981 79.8311  c
288.981 77.8831 288.515 76.4561 287.583 75.5498  c
286.651 74.6436 285.174 74.1904 283.153 74.1904  c
280.778 74.1904 l
h
278.810 72.5654 m
282.856 72.5654 l
285.679 72.5654 287.752 73.1514 289.075 74.3232  c
290.398 75.4951 291.060 77.3311 291.060 79.8311  c
291.060 82.3519 290.396 84.2008 289.067 85.3779  c
287.739 86.5550 285.669 87.1436 282.856 87.1436  c
278.810 87.1436 l
278.810 72.5654 l
h
f
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
240.000 20.0000 m
300.000 20.0000 l
300.000 140.000 l
240.000 140.000 l
240.000 20.0000 l
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
348.809 76.8823 m
348.809 78.3979 l
348.350 78.1688 347.876 77.9943 347.387 77.8745  c
346.897 77.7547 346.387 77.6948 345.855 77.6948  c
345.053 77.6948 344.452 77.8198 344.051 78.0698  c
343.650 78.3198 343.449 78.6896 343.449 79.1792  c
343.449 79.5542 343.592 79.8485 343.879 80.0620  c
344.165 80.2756 344.741 80.4813 345.605 80.6792  c
346.168 80.7886 l
347.314 81.0386 348.129 81.3875 348.613 81.8354  c
349.098 82.2834 349.340 82.9084 349.340 83.7104  c
349.340 84.6271 348.978 85.3511 348.254 85.8823  c
347.530 86.4136 346.538 86.6792 345.277 86.6792  c
344.746 86.6792 344.194 86.6297 343.621 86.5308  c
343.048 86.4318 342.444 86.2782 341.809 86.0698  c
341.809 84.3979 l
342.413 84.7104 343.004 84.9448 343.582 85.1011  c
344.160 85.2573 344.736 85.3354 345.309 85.3354  c
346.069 85.3354 346.655 85.2052 347.066 84.9448  c
347.478 84.6844 347.684 84.3146 347.684 83.8354  c
347.684 83.3979 347.535 83.0620 347.238 82.8276  c
346.941 82.5933 346.293 82.3667 345.293 82.1479  c
344.730 82.0229 l
343.720 81.8042 342.993 81.4787 342.551 81.0464  c
342.108 80.6141 341.887 80.0125 341.887 79.2417  c
341.887 78.3250 342.215 77.6141 342.871 77.1089  c
343.527 76.6037 344.460 76.3511 345.668 76.3511  c
346.262 76.3511 346.822 76.3953 347.348 76.4839  c
347.874 76.5724 348.361 76.7052 348.809 76.8823  c
h
351.749 82.5386 m
351.749 76.5854 l
353.358 76.5854 l
353.358 82.4761 l
353.358 83.4136 353.541 84.1141 353.905 84.5776  c
354.270 85.0412 354.817 85.2729 355.546 85.2729  c
356.421 85.2729 357.111 84.9943 357.616 84.4370  c
358.121 83.8797 358.374 83.1219 358.374 82.1636  c
358.374 76.5854 l
359.999 76.5854 l
359.999 86.4292 l
358.374 86.4292 l
358.374 84.9136 l
357.978 85.5177 357.522 85.9631 357.007 86.2495  c
356.491 86.5360 355.890 86.6792 355.202 86.6792  c
354.067 86.6792 353.207 86.3276 352.624 85.6245  c
352.041 84.9214 351.749 83.8927 351.749 82.5386  c
h
370.985 78.4761 m
371.392 77.7469 371.876 77.2104 372.438 76.8667  c
373.001 76.5229 373.662 76.3511 374.423 76.3511  c
375.444 76.3511 376.233 76.7104 376.790 77.4292  c
377.347 78.1479 377.626 79.1688 377.626 80.4917  c
377.626 86.4292 l
376.001 86.4292 l
376.001 80.5386 l
376.001 79.6011 375.834 78.9032 375.501 78.4448  c
375.168 77.9865 374.657 77.7573 373.970 77.7573  c
373.136 77.7573 372.478 78.0360 371.993 78.5933  c
371.509 79.1506 371.267 79.9084 371.267 80.8667  c
371.267 86.4292 l
369.626 86.4292 l
369.626 80.5386 l
369.626 79.5907 369.459 78.8901 369.126 78.4370  c
368.793 77.9839 368.277 77.7573 367.579 77.7573  c
366.756 77.7573 366.103 78.0360 365.618 78.5933  c
365.134 79.1506 364.892 79.9084 364.892 80.8667  c
364.892 86.4292 l
363.267 86.4292 l
363.267 76.5854 l
364.892 76.5854 l
364.892 78.1167 l
365.256 77.5125 365.696 77.0672 366.212 76.7808  c
366.728 76.4943 367.340 76.3511 368.048 76.3511  c
368.767 76.3511 369.376 76.5334 369.876 76.8979  c
370.376 77.2625 370.746 77.7886 370.985 78.4761  c
h
f
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
335.000 64.0000 m
335.000 96.0000 l
335.000 98.2091 336.791 100.000 339.000 100.000  c
381.000 100.000 l
383.209 100.000 385.000 98.2091 385.000 96.0000  c
385.000 64.0000 l
385.000 61.7909 383.209 60.0000 381.000 60.0000  c
339.000 60.0000 l
336.791 60.0000 335.000 61.7909 335.000 64.0000  c
h
S
1.00000 w
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
90.0000 15.0000 m
112.591 15.0000 l
S
newpath
124.966 15.0000 m
111.466 8.25000 l
111.466 21.7500 l
h
f
1.00000 w
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
90.0000 55.0000 m
112.591 55.0000 l
S
newpath
124.966 55.0000 m
111.466 48.2500 l
111.466 61.7500 l
h
f
1.00000 w
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
185.000 35.0000 m
227.598 35.0000 l
S
newpath
239.973 35.0000 m
226.473 28.2500 l
226.473 41.7500 l
h
f
1.00000 w
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
300.000 80.0000 m
322.635 80.0000 l
S
newpath
335.010 80.0000 m
321.510 73.2500 l
321.510 86.7500 l
h
f
1.00000 w
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
360.000 100.010 m
360.000 180.000 l
210.000 180.000 l
210.000 125.000 l
227.596 125.000 l
S
newpath
239.971 125.000 m
226.471 118.250 l
226.471 131.750 l
h
f
1.00000 w
2 J
10.0000 M
2.00000 w
0 J
1.45000 M
newpath
385.005 80.0000 m
422.614 80.0000 l
S
newpath
434.989 80.0000 m
421.489 73.2500 l
421.489 86.7500 l
h
f
1.00000 w
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
