Dear Kenny Zhu,

We regret to inform you that your paper, "Automatic Inference of Semantic Tag Phrases for Source Code Repositories" (#516), has not been accepted for presentation at the Thirty-First AAAI Conference on Artificial Intelligence (AAAI-17). The competition was very strong this year, with a record-number of 2,590 submissions and only 638 papers accepted, for an acceptance rate of below 25%. Attached to this message are the reviews of your submission, which we hope will explain the result and provide useful feedback on your work.

If you indicated that you would like your paper to be considered for a AAAI-17 workshop, then your submission and the reviews will be made available to the chairs of the workshop that you specified. We expect that workshop chairs will contact the authors of submissions selected for presentations in their workshops around November 18.

We understand that every paper is the result of the careful thought and hard work of its authors. Due to the large number of high-quality submissions, we were forced to reject many interesting and deserving papers. Every AAAI-17 submission received at least two (and 99% at least three) reviews, provided by over 1300 members of the program committee (all PhD researchers with extensive AI publication experience) as well as additional auxiliary reviewers under the supervision of PC members. The review process for each paper was overseen by one of 168 senior program committee members or special track co-chairs, who monitored the reviews of the papers and initiated discussion after the author feedback period. Reviewers read and discussed the author response, and in many cases additional reviews were collected. Discussions were often very detailed and, in most cases, led to resolution of issues brought up by the reviewers. For the main technical track, senior program committee mem!
 bers wrote a meta-review summarizing the recommendation and providing further explanation where required. Finally, the program co-chairs and track chairs decided the papers to include in the program.

Whereas the program committee expended tremendous effort in an attempt to be as fair and accurate as possible, we recognize that the conference reviewing process is inherently limited. Evaluation is subject to random and subjective factors, and no doubt many decisions could have justifiably gone the other way. We wish you well in finding an appropriate publication forum for your work.

We also hope that despite this submission outcome you will be able to join us at the conference in San Francisco. In addition to the outstanding technical program, AAAI-17 continues the tradition of a series of prominent invited speakers and panels, an extensive demo program, state-of-the-field presentations by senior members of the AAAI community, a "What's Hot" track highlighting the best work from sister conferences and competitions, and other special events. For more details on all AAAI-17 events, please see http://www.aaai.org/Conferences/AAAI/aaai17.php.

Sincerely,

Satinder Singh and Shaul Markovitch
AAAI-17 Program Co-Chairs

-----------------------------------


----------------------- REVIEW 1 ---------------------
PAPER: 516
TITLE: Automatic Inference of Semantic Tag Phrases for Source Code Repositories
AUTHORS: Yuding Liang, Hongfei Hu and Kenny Zhu

Significance: 2 (modest or incremental contribution)
Soundness: 3 (correct)
Scholarship: 2 (relevant literature cited but could expand)
Clarity: 2 (more or less readable)
Breadth of Interest: 2 (interest limited to specialty area) SUMMARY RATING: -1 (- (weak reject))

----------- Summarize the Main Contribution of the Paper ----------- tag program method with tags based on the body of the method

----------- Comments for the Authors ----------- In this paper, the authors target at the problem of tagging program methods. Based on the bimodal model proposed by Allamanis et al., they further use the call graph, identifiers, and program annotations. By setting the method name as the tag, they experiment on 10 Github projects to show the effectiveness and efficiency of their method. Overall the target problem is interesting and useful.

The major concerns are as follows.
1, it seems that the authors only change the input of Allamanis model by adding some side information (e.g., call graph and identifiers) into the parse tree. If so, the major contribution is from the software engineering aspect where some code information is incorporated.
2, the authors use method name as tag (ground truth), and their tag space is very small (149 tags for each project). In other words, their method only aims to find relevant tags from 149 tags, while the tag space could be huge in practice. More importantly, is predict the method name based on the method body really useful?

Other concerns are as follows.
1, the rational behind the experimental setting is unclear. For example, how do the authors choose the 100 (T, C) pairs, random or not? Why 49 negative samples are chosen?
2, the probabilistic graphical model in Fig 4 needs to be improved.
3, the authors may consider to change Fig 7 and Fig 8 to bar plot.
4, some typos in reference need to be fixed.


----------------------- REVIEW 2 ---------------------
PAPER: 516
TITLE: Automatic Inference of Semantic Tag Phrases for Source Code Repositories
AUTHORS: Yuding Liang, Hongfei Hu and Kenny Zhu

Significance: 1 (minimal or no contribution)
Soundness: 1 (major errors)
Scholarship: 2 (relevant literature cited but could expand)
Clarity: 1 (hard to follow)
Breadth of Interest: 2 (interest limited to specialty area) SUMMARY RATING: -3 (---)

----------- Summarize the Main Contribution of the Paper ----------- This paper has strong motivation to focus on the work of tag the source code with natural language phrases. It tries to combine the semantic and structural information from the code into an existing model. The experimental results show that the proposed method outperform the pervious model and baseline methods.

----------- Comments for the Authors ----------- There are some weaknesses of this paper as follows:
1. We can not find the detailed description of the tag phrases generation processing. If it is based on the previous supervised learning model, it is necessary to present the previous baseline work. Another baseline model of topic model in page 4 is also not described clearly for your application.  
2. I cannot understand how you combine the call graph, identifier semantics, and comments into your prediction model. 
3. I do not think this paper is ready to publish because it will make the readers confusion without many key method descriptions.


----------------------- REVIEW 3 ---------------------
PAPER: 516
TITLE: Automatic Inference of Semantic Tag Phrases for Source Code Repositories
AUTHORS: Yuding Liang, Hongfei Hu and Kenny Zhu

Significance: 1 (minimal or no contribution)
Soundness: 1 (major errors)
Scholarship: 1 (important related work missing or mischaracterizes prior research)
Clarity: 1 (hard to follow)
Breadth of Interest: 1 (out of scope)
SUMMARY RATING: -5 (----- (strong reject))

----------- Summarize the Main Contribution of the Paper ----------- The paper presents a method to infer tag phrases for methods in source code repositories. The paper takes advantage of method call information besides identifier names and comments.

The problem addressed seems to be an interesting one. However, it is limited in scope which diminishes the appropriateness of this paper for AAAI.

It is not clear to this author what exactly is the value of approach. In the examples shown in Table 4, all the correct tags could be obtained without the function call graph - simply segmenting the target method names by the capital letters will provide the correct tag. For instance, I would be curious how a simply-augmented TF-IDF approach with simple identifier segmentation (split by capital letters) would work. That is, just use as token/words for the TF-IDF approach not the identifiers but the tokens obtained by splitting the identifiers by the capital letters.

----------- Comments for the Authors ----------- The paper presents a method to infer tag phrases for methods in source code repositories. The paper takes advantage of method call information besides identifier names and comments.

The problem addressed seems to be an interesting one. However, it is limited in scope which diminishes the appropriateness of this paper for AAAI.

It is not clear to this author what exactly is the value of approach. In the examples shown in Table 4, all the correct tags could be obtained without the function call graph - simply segmenting the target method names by the capital letters will provide the correct tag. For instance, I would be curious how a simply-augmented TF-IDF approach with simple identifier segmentation (split by capital letters) would work. That is, just use as token/words for the TF-IDF approach not the identifiers but the tokens obtained by splitting the identifiers by the capital letters.


-------------------------  METAREVIEW  ------------------------
PAPER: 516
TITLE: Automatic Inference of Semantic Tag Phrases for Source Code Repositories

This paper proposes to tag the source code with natural language phrases using an existing model proposed by Allamanis et al. 
 
The reviewers evaluated this paper against the contribution, technical quality, evaluations as well as presentation, based on which the ratings are provided. The reviews are discussed among the SPC and reviewers, based on which the final recommendation is made.

