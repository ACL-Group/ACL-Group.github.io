Dear Kenny Zhu:

I am sorry to inform you that the following submission was not selected by the program committee to appear at ACL-IJCNLP SystemDemo 2015: 

      BeanParser: A Sequence-based Dependency Parser

The selection process was very competitive. Due to time and space limitations, we could only choose a small number of the submitted papers to appear on the program.  Nonetheless, I still hope you can attend the conference. 

I have enclosed the reviewer comments for your perusal.

If you have any additional questions, please feel free to get in touch.

Best Regards,
Hsin-Hsi Chen and Katja Markert
ACL-IJCNLP SystemDemo 2015 

============================================================================
ACL-IJCNLP SystemDemo 2015 Reviews for Submission #63 ============================================================================ 

Title: BeanParser: A Sequence-based Dependency Parser

Authors: Wenjing Fang, Kenny Zhu, Yizhong Wang and Jia Tan ============================================================================
                            REVIEWER #1
============================================================================ 


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

                         APPROPRIATENESS: 5
                                 CLARITY: 3
              ORIGINALITY/INNOVATIVENESS: 3
                 SOUNDNESS / CORRECTNESS: 3
                   MEANINGFUL COMPARISON: 4
                      IMPACT / USABILITY: 3
                          RECOMMENDATION: 3
                              CONFIDENCE: 4


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

It introduced a parsing algorithm which (they claim) imitates how human parses sentences. (I need to see some evidence or reference that is the case). As the authors say, it is still work-in-progress and clearer explanation with better results would be easily expected. On top of that, this should be a research paper, not a demo system. The only demo part in the paper is in Figure 4, which is a very simple output of dependency fragment with colors on the different results. This is not very attractive to be a demo system at the conference.

============================================================================
                            REVIEWER #2
============================================================================ 


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

                         APPROPRIATENESS: 5
                                 CLARITY: 4
              ORIGINALITY/INNOVATIVENESS: 3
                 SOUNDNESS / CORRECTNESS: 4
                   MEANINGFUL COMPARISON: 4
                      IMPACT / USABILITY: 4
                          RECOMMENDATION: 4
                              CONFIDENCE: 4


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

This paper proposes a new dependency parsing framework.  It integrates the major features from graph-based and transition-based methods. In the experiments, the authors compare their methods with MstParser and MaltParser from parsing accuracies and parsing time.  The results show the performance of Bean is between MST and Malt from aspects of accuracy and time.

In summary, the analysis of specific features of two major parsing frameworks is clear, the integration is reasonable and the comparison is deep.

============================================================================
                            REVIEWER #3
============================================================================ 


---------------------------------------------------------------------------
Reviewer's Scores
---------------------------------------------------------------------------

                         APPROPRIATENESS: 5
                                 CLARITY: 4
              ORIGINALITY/INNOVATIVENESS: 3
                 SOUNDNESS / CORRECTNESS: 2
                   MEANINGFUL COMPARISON: 1
                      IMPACT / USABILITY: 2
                          RECOMMENDATION: 2
                              CONFIDENCE: 3


---------------------------------------------------------------------------
Comments
---------------------------------------------------------------------------

This paper presents a parsing framework with two components: the sequence predictor that generates a permutation representing the sequence of words to be processed; and the head mapper that determines the head of each word in the sequence. Even though the authors claim that the proposed system shows promising results, the proposed method could not outperform MST parser in terms of parsing accuracy. The proposed system is 32% faster than MST parser, which is not so impressive to me because of the expense of the parsing accuracy.

I do not think System Demonstration is the right place to publish this kind of the work. The main goal of this paper is not to present an implementation/demonstration but to propose the parsing framework. I would recommend submitting this work to the main conference or a workshop specialized for parsing (e.g., IWPT). In order to do that, it may be necessary to revise this paper, to report error analysis, and to make comparisons with recent studies.

The proposed framework is similar to graph-based parsers except that it employs an algorithm for inexact (greedy and faster) decoding. It would be great if this paper could clarify the contribution in the recent advances in dependency parsing. Here is the paper reporting an empirical comparison with a number of
references:

Lingpeng Kong and Noah A. Smith. (2014) An Empirical Comparison of Parsing Methods for Stanford Dependencies. http://arxiv.org/pdf/1404.4314.pdf

Minor comments:

Section 3: we first give a example -> an example


--
ACL-IJCNLP SystemDemo 2015 - https://www.softconf.com/acl2015/SystemDemo

