%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 839.000000 273.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.4 (Build 16E195) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 831 271
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 831 271
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /M put
dup 34 /e put
dup 35 /n put
dup 36 /t put
dup 37 /i put
dup 38 /o put
dup 39 /space put
dup 40 /T put
dup 41 /a put
dup 42 /b put
dup 43 /l put
dup 44 /E put
dup 45 /y put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




002B001F00130000001C2B00BA00040004001B2BB8000120457D691844B8000A2BB800002B000000
00>] def
/CharStrings 15 dict dup begin
/.notdef 0 def
/space 1 def
/E 2 def
/M 3 def
/T 4 def
/a 5 def
/b 6 def
/e 7 def
/i 8 def
/l 9 def
/n 10 def
/o 11 def
/t 12 def
/y 13 def
/uni2B91 14 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B1454491BCF48412CA40CE1C5F7851A403FDB5F7EBECD00BD59442330258C8F54F9A2B51CA5B18D1E30D1E4A019367173FB88C9EAC98BBAE7C8DBD85C921487E373D87D743B1E079DE09460CC2A636025DC35BEC305286A6417863D21598DD21D73FBBE42615EB2762AAC80573D4143CF57936F52E464932D7BD1ED39B17EDA2D379BBFD12CD99CFA850553E592B7609A3943FF0823A5C82D8FFF496D68B2A8E29091A893ACB2BC1152B9C08A5C5EB6994130705D16D80285ED2F146FF74C7ABC3850335C859D0A8ACF43B83063AC727EA1692AC4EB21C2EE8E40314CAD543EC085358019828CD8E69A422EF938AD7B06AFAFB229F636FE051DE4D792B3F31B65EC9E6ABEAB1794200AFBF71AA54AF3D36166DD3271A192D512EB9391BE48CF96BA4EA0BED929068F15F30941A3295F5DBA9621625439763FC08DDF2203F5846C5F0ADA8B4E0E977E41056C7A6F8E7944549F14A39509B322B2B103B77672759F95FD5B726AB8FC5E1699830CDEFCD262BF9E1F58D1A434C6A20949A21A491AE98E4A8A977B5B0B462385E28CF6D619464FB2EE150C7D53EA3E52FDA2398FA2870054BFF3DBF4A5064B9632096298CEDFCB8A78D83E385B8B87F5813440F9B6BF6E48E877773811CEED04661E300F8C874E428B940B964C63402EE77A551C869DDD20EDD650291EED1B1F9D5245261D457A018A37D35E3AB6A315A234461DD837C97B8C48AF589ACE94E535C5B91549B0CD5B71012AB6BA75669D6E97B1244CB
9ADD01A98C05B6E703B1C4D3478A26894A0FC80F0A9A9F293BD4CD668E7CB5D618ADD75BB74BDFF79BBE9B0B0E48ACC599E71A6E0AC09E006C4F8A54BCA93A48EB541FDA421253C242D9D1DD8B2E74E378D9F4FDC38DA8C462A7C1F154B96BE8A510FE91EAA04F54618CACE2E0B397B4F12C14D87B80A903CC293DE051360841850761C40BA9B7F89DC6D6D00881DA64DE595DB6ABEF9028A43CF6694AE79B88CE5596E39E46F90A71F864119B48EE931B20CDABC1DA5394881A383302F49877C0FBA276646104002C9373F9667547C383C022E827ED0E8EAE375C3BE60FD1D67787974B7A1A9C7803E4419E10BA2094671B9DE251A9EAFA067F3314D3EF4DB1BD6DF9E7DBC431A338EA07AB1DCFB8919E128EBB2F4553FEFEF555324BAB6395F82A811C00105281185DAB53394FD5DF458721864B900DABE3F954F46EB939B99CD2C5B314422AF27C5163D4FB5BFF053625BBC6B83434334A160524B1C98777F3A57516AFDEA959D3D91F430A0E303F297954ABF5D80EA4459BC9A76D05C9A464BF10178CCB51FF6AC76E0872467494B3C6681618C4CEA30484F04930F87DCCF2FB74AAF70F0925D5E90634965D084EB2B068B0697F79FAAB006E603122E71BF4C036EA830227875B7C50D8573797421DE1096B790328ACF91B768D9B2B43AE2CF50A06E218B58016C036925CA50409FB40E35FFDB731FB6715463969B9ED91A24D8A8C167D5BE1384F1DBA923DFB9762AC133EBAB1F80DEF1333AFF01631FB302BD0EC18B8C80EA463B62453BA0AEF701AB6A610B7F01FCBB318A3FE1610FB25C503E3B724B21A149A69E87378F91A334EEBB6AD566D8102F026647DC7D3BD4022E64330032B8C1306FF76521AAF6C481D7C19355B939561ABF2749E1C440D170BF030CB332A07CBDB4192C031C70F79A4F080FAD22D2B9A2C7CE8377D506D60EB5300FDD864D7B4AC4B4AB6044ED83DD4C6A1E7CF174EDB47C93A4D5CFAED527F741C670DFAA2116D04DB62BBEDA30F46B6E1934F5EF0459CB0F02E6CF8AA09BDE08595973BE7BE5E9D420B42ABAA0814E4441D46E2558C535ABA0D731289EF6FB61CAE9DA007CEB75D63221949BC94DBCB89180A120C3804EEEC2E3CB3813C61A9CC1223E3D7C80BE358A56677E8AE2849412EC66AE953649605F0540A3E3A2C1A0405B3E58BD55B7D7168F3592AF4E51624F99A4939BD286264C1406277756ED0A8F10661ED10BBADA184DE4CDF3400F529DB925D33348D4E2ED221F17A87F1DA01AE2E4C049BC54A5D2A9114F4F75DAD109C99D422713713505173E19B7DFC0D13DE97D7164100FA96DEE2C22A13BA52BB3B941F02E177B430C3ABBAB59EB0CAE39F5004667AC44D3F4522749ACE20BAF68FFEF09F50BEFB023B0DBAA2D87833042C5F88E44B3A181E793F248A800E859AB3A9D04B4CA1FF3F824E25C6
9437B9366C49C2D1807C9C5AE5550AC9DBCCF5FC727A7D098C0B89EC72CF5BAE16B319CC1843EFC7DFAD5462B55FF322FFDC2E3007A3841FE7082DA72EEDC3191731A51855D896BDB8C171F1378FEED7673E47D2CB7A8621A09DE736B56D0A07F6F8BC40DE112B5E4D6029A4E0923C56761CF8625EEA9AF2AC8EFD5664C19CFABE1F46DD6B8AA159C10F6856D375967975AB2293C6FB40BD90687728058840CF1835C064C4D07048D448A518F68B941C697A45848A0E403152FB5AF8F18D6181A989A086DE2BAB16303F5AE999BEE4A0DED29EFFCFE7986914A0634C5394D81BCF6C4D4BDB7525738A9CA6D4B0913F8F97451FDEE9D3544E3DE9669FD2A7723BC226F2564D9CFA45318929D2E2553D906FDFC39099EBD1C466058A4073AF38C78AAB7327D12FD773458BDAF76A7FC742FC1C547D9E85E3F94CE3225AE321E1B3F7C93640659FCCB83E2B8AC66399C1B0146461D0E05D21647C2A0C7D68C00F79A595080006A4F65963AA1F0BF35D57608DA05BD57B73913B83832147B62D73800DC41D4E75583E48D1E572AA32335C449F3F804D07F9C9094081DBCD37DD767BD451BD689D343220DC5EA0BD63C29C350DEC886FE04578270C3234BB4C22CE65001D77F1E3CF54C0DA2EAF30639D67DCFDD3601BD241C8BFDC12E541BC7B1BEE7A28C59255514F037ADDB9684B
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 830.60999 270.26999 rc
0 270.26999 m
830.60999 270.26999 l
830.60999 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
-2576.8721 4537.083 m
2525.4355 4537.083 l
2525.4355 -990.59839 l
-2576.8721 -990.59839 l
h
-2576.8721 4537.083 m
f
1 0.69645202 0.70151103 sc
5.681077 193.89565 m
96.578308 193.89565 l
96.578308 145.79042 l
5.681077 145.79042 l
h
5.681077 193.89565 m
f
2 J
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
895.73846 3399.1458 m
987.55383 3399.1458 l
987.55383 3447.7371 l
895.73846 3447.7371 l
h
895.73846 3399.1458 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
96.578308 193.89565 m
187.47554 193.89565 l
187.47554 145.79042 l
96.578308 145.79042 l
h
96.578308 193.89565 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
987.55383 3399.1458 m
1079.3693 3399.1458 l
1079.3693 3447.7371 l
987.55383 3447.7371 l
h
987.55383 3399.1458 m
S
0 i
/Cs3 SC
0.95443678 0.71008444 0.70591474 sc
CM
187.47554 193.89565 m
278.37277 193.89565 l
278.37277 145.79042 l
187.47554 145.79042 l
h
187.47554 193.89565 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1079.3693 3399.1458 m
1171.1846 3399.1458 l
1171.1846 3447.7371 l
1079.3693 3447.7371 l
h
1079.3693 3399.1458 m
S
0 i
/Cs3 SC
0.95443678 0.71008444 0.70591474 sc
CM
278.37277 193.89565 m
369.26999 193.89565 l
369.26999 145.79042 l
278.37277 145.79042 l
h
278.37277 193.89565 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1171.1846 3399.1458 m
1263 3399.1458 l
1263 3447.7371 l
1171.1846 3447.7371 l
h
1171.1846 3399.1458 m
S
0 i
/Cs3 SC
0.95443678 0.71008444 0.70591474 sc
CM
96.578308 145.79042 m
187.47554 145.79042 l
187.47554 97.685211 l
96.578308 97.685211 l
h
96.578308 145.79042 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
987.55383 3447.7371 m
1079.3693 3447.7371 l
1079.3693 3496.3281 l
987.55383 3496.3281 l
h
987.55383 3447.7371 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
187.47554 145.79042 m
278.37277 145.79042 l
278.37277 97.685211 l
187.47554 97.685211 l
h
187.47554 145.79042 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1079.3693 3447.7371 m
1171.1846 3447.7371 l
1171.1846 3496.3281 l
1079.3693 3496.3281 l
h
1079.3693 3447.7371 m
S
0 i
/Cs3 SC
0.95443678 0.71008444 0.70591474 sc
CM
278.37277 145.79042 m
369.26999 145.79042 l
369.26999 97.685211 l
278.37277 97.685211 l
h
278.37277 145.79042 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1171.1846 3447.7371 m
1263 3447.7371 l
1263 3496.3281 l
1171.1846 3496.3281 l
h
1171.1846 3447.7371 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
96.578308 97.685211 m
187.47554 97.685211 l
187.47554 49.579994 l
96.578308 49.579994 l
h
96.578308 97.685211 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
987.55383 3496.3281 m
1079.3693 3496.3281 l
1079.3693 3544.9192 l
987.55383 3544.9192 l
h
987.55383 3496.3281 m
S
0 i
/Cs3 SC
0.95443678 0.71008444 0.70591474 sc
CM
278.37277 97.685211 m
369.26999 97.685211 l
369.26999 49.579994 l
278.37277 49.579994 l
h
278.37277 97.685211 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1171.1846 3496.3281 m
1263 3496.3281 l
1263 3544.9192 l
1171.1846 3544.9192 l
h
1171.1846 3496.3281 m
S
895.73846 3544.9192 m
987.55383 3544.9192 l
987.55383 3593.5103 l
895.73846 3593.5103 l
h
895.73846 3544.9192 m
S
0 i
/Cs3 SC
0.95051777 0.71016872 0.70199311 sc
CM
96.578308 49.579994 m
187.47554 49.579994 l
187.47554 1.4747791 l
96.578308 1.4747791 l
h
96.578308 49.579994 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
987.55383 3544.9192 m
1079.3693 3544.9192 l
1079.3693 3593.5103 l
987.55383 3593.5103 l
h
987.55383 3544.9192 m
S
1079.3693 3544.9192 m
1171.1846 3544.9192 l
1171.1846 3593.5103 l
1079.3693 3593.5103 l
h
1079.3693 3544.9192 m
S
0 i
1 1 1 sc
CM
278.37277 49.579994 m
369.26999 49.579994 l
369.26999 1.4747791 l
278.37277 1.4747791 l
h
278.37277 49.579994 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1171.1846 3544.9192 m
1263 3544.9192 l
1263 3593.5103 l
1171.1846 3593.5103 l
h
1171.1846 3544.9192 m
S
/Cs1 SC
0 sc
0 i
0.99000001 0 0 -0.99000001 184.63499 236.04129 cm
/F1.1[ 27 0 0 -27 0 0]sf
-84.523499 9.6220016 m
(!"#$%&#'\(\)*+")[ 23.517000 14.499000 15.012000 8.505000 5.994000 15.498000 15.012000 7.506000 12.501000 14.499000 16.011000 5.994000 0.000000 ] xS
/Cs2 SC
1 0.69645202 0.70151103 sc
CM
5.681077 145.79042 m
96.578308 145.79042 l
96.578308 97.685211 l
5.681077 97.685211 l
h
5.681077 145.79042 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
895.73846 3447.7371 m
987.55383 3447.7371 l
987.55383 3496.3281 l
895.73846 3496.3281 l
h
895.73846 3447.7371 m
S
0 i
1 0.69645202 0.70151103 sc
CM
5.681077 97.685211 m
96.578308 97.685211 l
96.578308 49.579994 l
5.681077 49.579994 l
h
5.681077 97.685211 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
895.73846 3496.3281 m
987.55383 3496.3281 l
987.55383 3544.9192 l
895.73846 3544.9192 l
h
895.73846 3496.3281 m
S
0 i
0.69999999 0.69999999 1 sc
CM
461.0354 193.11163 m
552.83429 193.11163 l
552.83429 145.71646 l
461.0354 145.71646 l
h
461.0354 193.11163 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1355.6923 3399.9377 m
1448.4185 3399.9377 l
1448.4185 3447.8118 l
1355.6923 3447.8118 l
h
1355.6923 3399.9377 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
552.83429 193.11163 m
644.63312 193.11163 l
644.63312 145.71646 l
552.83429 145.71646 l
h
552.83429 193.11163 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1448.4185 3399.9377 m
1541.1445 3399.9377 l
1541.1445 3447.8118 l
1448.4185 3447.8118 l
h
1448.4185 3399.9377 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
644.63312 193.11163 m
736.43201 193.11163 l
736.43201 145.71646 l
644.63312 145.71646 l
h
644.63312 193.11163 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1541.1445 3399.9377 m
1633.8707 3399.9377 l
1633.8707 3447.8118 l
1541.1445 3447.8118 l
h
1541.1445 3399.9377 m
S
0 i
/Cs3 SC
0.70225126 0.70210689 0.98042822 sc
CM
736.43201 193.11163 m
828.2309 193.11163 l
828.2309 145.71646 l
736.43201 145.71646 l
h
736.43201 193.11163 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1633.8707 3399.9377 m
1726.5968 3399.9377 l
1726.5968 3447.8118 l
1633.8707 3447.8118 l
h
1633.8707 3399.9377 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
461.0354 145.71646 m
552.83429 145.71646 l
552.83429 98.321289 l
461.0354 98.321289 l
h
461.0354 145.71646 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1355.6923 3447.8118 m
1448.4185 3447.8118 l
1448.4185 3495.6855 l
1355.6923 3495.6855 l
h
1355.6923 3447.8118 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
552.83429 145.71646 m
644.63312 145.71646 l
644.63312 98.321289 l
552.83429 98.321289 l
h
552.83429 145.71646 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1448.4185 3447.8118 m
1541.1445 3447.8118 l
1541.1445 3495.6855 l
1448.4185 3495.6855 l
h
1448.4185 3447.8118 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
644.63312 145.71646 m
736.43201 145.71646 l
736.43201 98.321289 l
644.63312 98.321289 l
h
644.63312 145.71646 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1541.1445 3447.8118 m
1633.8707 3447.8118 l
1633.8707 3495.6855 l
1541.1445 3495.6855 l
h
1541.1445 3447.8118 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
736.43201 145.71646 m
828.2309 145.71646 l
828.2309 98.321289 l
736.43201 98.321289 l
h
736.43201 145.71646 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1633.8707 3447.8118 m
1726.5968 3447.8118 l
1726.5968 3495.6855 l
1633.8707 3495.6855 l
h
1633.8707 3447.8118 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
461.0354 98.321289 m
552.83429 98.321289 l
552.83429 50.926109 l
461.0354 50.926109 l
h
461.0354 98.321289 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1355.6923 3495.6855 m
1448.4185 3495.6855 l
1448.4185 3543.5596 l
1355.6923 3543.5596 l
h
1355.6923 3495.6855 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
736.43201 98.321289 m
828.2309 98.321289 l
828.2309 50.926109 l
736.43201 50.926109 l
h
736.43201 98.321289 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1633.8707 3495.6855 m
1726.5968 3495.6855 l
1726.5968 3543.5596 l
1633.8707 3543.5596 l
h
1633.8707 3495.6855 m
S
1355.6923 3543.5596 m
1448.4185 3543.5596 l
1448.4185 3591.4333 l
1355.6923 3591.4333 l
h
1355.6923 3543.5596 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
552.83429 50.926109 m
644.63312 50.926109 l
644.63312 3.5309331 l
552.83429 3.5309331 l
h
552.83429 50.926109 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1448.4185 3543.5596 m
1541.1445 3543.5596 l
1541.1445 3591.4333 l
1448.4185 3591.4333 l
h
1448.4185 3543.5596 m
S
1541.1445 3543.5596 m
1633.8707 3543.5596 l
1633.8707 3591.4333 l
1541.1445 3591.4333 l
h
1541.1445 3543.5596 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
736.43201 50.926109 m
828.2309 50.926109 l
828.2309 3.5309331 l
736.43201 3.5309331 l
h
736.43201 50.926109 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1633.8707 3543.5596 m
1726.5968 3543.5596 l
1726.5968 3591.4333 l
1633.8707 3591.4333 l
h
1633.8707 3543.5596 m
S
/Cs1 SC
0 sc
0 i
0.99000001 0 0 -0.99000001 646.70764 234.13745 cm
-69.511497 9.6220016 m
(,#$%$-'\(\)*+")[ 16.497000 15.012000 8.505000 5.994000 8.505000 13.500000 7.506000 12.501000 14.499000 16.011000 5.994000 0.000000 ] xS
/Cs3 SC
0.95443678 0.71008444 0.70591474 sc
CM
187.47554 97.685211 m
278.37277 97.685211 l
278.37277 49.579994 l
187.47554 49.579994 l
h
187.47554 97.685211 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1079.3693 3496.3281 m
1171.1846 3496.3281 l
1171.1846 3544.9192 l
1079.3693 3544.9192 l
h
1079.3693 3496.3281 m
S
0 i
/Cs3 SC
0.69043177 0.6904543 0.96474361 sc
CM
644.63312 98.321289 m
736.43201 98.321289 l
736.43201 50.926109 l
644.63312 50.926109 l
h
644.63312 98.321289 m
f
0.60000002 i
/Cs2 SC
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1541.1445 3495.6855 m
1633.8707 3495.6855 l
1633.8707 3543.5596 l
1541.1445 3543.5596 l
h
1541.1445 3495.6855 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
278.37277 49.579994 m
369.26999 49.579994 l
369.26999 1.4747791 l
278.37277 1.4747791 l
h
278.37277 49.579994 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1171.1846 3544.9192 m
1263 3544.9192 l
1263 3593.5103 l
1171.1846 3593.5103 l
h
1171.1846 3544.9192 m
S
1 J
1 j
1278.5261 3496.3281 m
1332.0876 3496.3281 l
S
0 i
CM
445.58679 97.685211 m
437.66681 100.65521 l
437.66681 94.71521 l
h
445.58679 97.685211 m
f
0 J
0 j
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1340.0876 3496.3281 m
1332.0876 3493.3281 l
1332.0876 3499.3281 l
h
1340.0876 3496.3281 m
S
0.80000001 0.80000001 0.80000001 sc
CM
187.47554 49.579994 m
278.37277 49.579994 l
278.37277 1.4747791 l
187.47554 1.4747791 l
h
187.47554 49.579994 m
f
2 J
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1079.3693 3544.9192 m
1171.1846 3544.9192 l
1171.1846 3593.5103 l
1079.3693 3593.5103 l
h
1079.3693 3544.9192 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
5.681077 49.579994 m
96.578308 49.579994 l
96.578308 1.4747791 l
5.681077 1.4747791 l
h
5.681077 49.579994 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
895.73846 3544.9192 m
987.55383 3544.9192 l
987.55383 3593.5103 l
895.73846 3593.5103 l
h
895.73846 3544.9192 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
552.83429 98.321289 m
644.63312 98.321289 l
644.63312 50.926109 l
552.83429 50.926109 l
h
552.83429 98.321289 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1448.4185 3495.6855 m
1541.1445 3495.6855 l
1541.1445 3543.5596 l
1448.4185 3543.5596 l
h
1448.4185 3495.6855 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
644.63312 50.926109 m
736.43201 50.926109 l
736.43201 3.5309331 l
644.63312 3.5309331 l
h
644.63312 50.926109 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1541.1445 3543.5596 m
1633.8707 3543.5596 l
1633.8707 3591.4333 l
1541.1445 3591.4333 l
h
1541.1445 3543.5596 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
461.0354 50.926109 m
552.83429 50.926109 l
552.83429 3.5309331 l
461.0354 3.5309331 l
h
461.0354 50.926109 m
f
0.60000002 i
0 0 0 sc
0.99000001 0 0 -0.99000001 -881.10004 3559.05 cm
1355.6923 3543.5596 m
1448.4185 3543.5596 l
1448.4185 3591.4333 l
1355.6923 3591.4333 l
h
1355.6923 3543.5596 m
S
ep
end
%%Trailer
%%EOF
