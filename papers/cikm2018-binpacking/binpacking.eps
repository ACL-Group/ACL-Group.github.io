%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 445.000000 373.000000
%APL_DSC_Encoding: UTF8
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 445 373
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 445 373
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /plus put
dup 34 /ellipsis put
dup 35 /s put
dup 36 /e put
dup 37 /q put
dup 38 /period put
dup 39 /o put
dup 40 /r put
dup 41 /i put
dup 42 /E put
dup 43 /n put
dup 44 /c put
dup 45 /d put
dup 46 /D put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<





00>] def
/CharStrings 16 dict dup begin
/.notdef 0 def
/plus 1 def
/period 2 def
/D 3 def
/E 4 def
/c 5 def
/d 6 def
/e 7 def
/i 8 def
/n 9 def
/o 10 def
/q 11 def
/r 12 def
/s 13 def
/ellipsis 14 def
/uni2B91 15 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4127891 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C91B2145C684A74C06611B00C1FA345EA5AA002A80B57843F114AFEA920B3EC9BE8C9A878C510DA4DD07F53CD7E2D4262173974D4C6D2B188E1BE25F3AC6CC11DCBCF20BD3CDC848CC174C0E2358C315D58691196BFF01FB5A08FBA40CF32F9227A798A1666C1042F937C83CF1121855960AA4D2B8BA89B1D883143EBD4E96DFC544BFA75FBEA9F2EE7E8AF2417F7614DE8DAC41B334574F448B9BF6314011E1DD5839E393101426B07613158C5636EB0FE2E725F520FD44921D6EA576DC981D611DF529E68C9F95E5C1EF396507FFCADCCB4A99132099A6A4B042FE6FC0CE792C257637A183B4BA45EC7F3667553B2B957AEACA8FF1818D778CCC2B6A7556C4535CEF41B535C821008ADA213C32341CF9988C66E09BACA2925F500B2996969CB9A7D8B3337A9300D8712CA9A925ACE687D519F1D43BB9BE9300BC5925C3CC72725CFA94408F63C8504707A3C7F64E827F994FD0CAF3E909D5B0EE0986BD803D556A2F0CEEDAA0B95DEDE0A3732DEC6822BD8CA408DC19CFF52ECF9118683A9708B19E4A6F60CAE4DD3B0F720AC8E8DF8F9CD48E40CBFE8EB31E9B6ACFA0FE9C78D057A5B10DF8BDCCE830CFB42B3A0ADDD0C75CB286354278537A51AB055F4A4392C096A3F92CFDADEC28DD7D8A90714ED345F83CF1F95E02E46782E28B7225B557A5718D7FCBBD05AB9075235866440EF57B4146C3B52D93651874E520B6C4F3810C0CF831CB2B0B20A8DB9A17506D0A2CF20222CEC95B418E32740021CA5AD03
CD5032D6D101B7424FAE944E06E2247FC1DFD5EE9395D70C1467E89FEB80FC1AAD72479CE5464BA32B18122366C973D4532C28A6F60ABD1710101AABFAB23AC82AAB58D7F8F242F1B41ED9210603A931B837D33F7E8567C9C6E61FD18FF362FD32DB3DC2252AF10159DE0A3F05E644BAC16AE04DEC2D87DB8A5365DE7973EA60A5C1483429DA82668A759103084816F92199FC83DBB2C0B6CD70473BC72B53B0C2D731CF998A454EF58B592FC2BAEBE8A8089F64FE63BF707580EF7F208AD6E541BC279910C98F97FEE8A8B110E9B9756439B385C540576F9835010340A52E391AC5A5EB66F56E75B02B476FC8D3F926057EA33AF529DB6A004928CDEA4A2043AD4ACBB6839AA3CACCEC791B2F604BB78B01CC13F7F8E974323C6D08F28B4BC80DCAD5FFE5BF071F26170B192977D4C2E138A7BEFE00EF574BFBC464E2571E0546FF84591793D7FB2A2438A689C93CB43CD0650B22FCB0A8F95AC88F4124F531E3D84C72EC1F2AFCB4CF84F9542DEFFBB51E53C874D460AFC244AB0B51CB0F52301E2E5F9D391559340BC0443D1095151B2FAE9D5FB042B8643951EC946D75176B1BDADDFE0844B708668BADED97A1781472D388BE432EBF8B02A67F894222DAFDE8388678F5C02790FC7FFFE49D35A13A287EF923A6C0E7E59DBD7DDBB49D67535868FD668C95D45B2FFC4CF9BE2AC5C5E9E12DE232831D4963D60441FDB6C61AB619EE68BFB5F782B8F456765FA80CBAB706B186CC1A5F1CF26F5E84946756EE7616496D2A1DCC9C5E4796766BCEE1355BC0F23B22560F76FEE874AEEFF0FD0CE30C82E2A0877AC8A4470E9F289635438704BA293B6DCEC07B4D61CF10386E3BA1F5BFC25D81180746329EE04CA2359D8783F9CCD615AABA77766DD54B23F423D891BFAA8D16104564DBBE501A227D06F8355F9B3180632489B951BB689AA619897A63EBF060BBABA77E634BEE32800B313973F74AB53B76734542D6AE6D91E814EF0D3A204A54D5ED310DD10E5FECB08EB4B211F48F8EB1FDFBE6352C14FCF6CF8580536C606372C3BB4B143DCBF45AF2FA480ABC46BF66509E01562184C694971C3ED6A6B48DD513394DDBB0878D1100D7AF22D0541BDB5173A22F52005A3DA9B4FAEEFB7BB746A1B6469FCAF06703A22B789907881275FAB77ED2B93B59EE782DAE3FB4A8C4EF7D3075013641EA9AD197C16DD722C652E07B82F71339DAB0CF996A792BE1151A2BCE7F027F3F637372FBA196C375B9984822E1A7C9CAF0D277E97B839B1FA66481D71AC5B2EE0EEB0C44EA57615E1E3C5966BA313D863237941E33A47BD065FA487E9DFD13EC2C12A2CB9FE2EDA9159F5D08D555A62D1E1FE36DA39718F1D28C0424D50D95D16EFEEAE98ABE808F7A056F7D9BA709EFC0D2FBBAF50BD8E9070A5F3CFB9E7B18283A680F9D6F24C8C475A43655D805EB7F

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs3 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 445 373 rc
183.09972 291.90515 m
347.09973 291.90515 l
347.09973 258.90515 l
183.09972 258.90515 l
h
183.09972 291.90515 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
307.09973 142.09483 m
471.09973 142.09483 l
471.09973 175.09483 l
307.09973 175.09483 l
h
307.09973 142.09483 m
S
0 i
0.2 0.2 0.2 sc
CM
1 134 m
31 134 l
31 101 l
1 101 l
h
1 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
125 300 m
155 300 l
155 333 l
125 333 l
h
125 300 m
S
0 i
0.2 0.2 0.2 sc
CM
65 134 m
95 134 l
95 101 l
65 101 l
h
65 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
189 300 m
219 300 l
219 333 l
189 333 l
h
189 300 m
S
0 i
0.2 0.2 0.2 sc
CM
129 134 m
159 134 l
159 101 l
129 101 l
h
129 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
253 300 m
283 300 l
283 333 l
253 333 l
h
253 300 m
S
0 i
0.2 0.2 0.2 sc
CM
193 134 m
223 134 l
223 101 l
193 101 l
h
193 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
317 300 m
347 300 l
347 333 l
317 333 l
h
317 300 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
257 134 m
287 134 l
287 101 l
257 101 l
h
257 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
381 300 m
411 300 l
411 333 l
381 333 l
h
381 300 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
321 134 m
351 134 l
351 101 l
321 101 l
h
321 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
445 300 m
475 300 l
475 333 l
445 333 l
h
445 300 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
385 134 m
415 134 l
415 101 l
385 101 l
h
385 134 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
509 300 m
539 300 l
539 333 l
509 333 l
h
509 300 m
S
0 0 0 sc
155 316.5 m
179.10001 316.5 l
S
0 J
0 j
0 i
187.10001 316.5 m
179.10001 316.5 l
179.10001 313.5 m
187.10001 316.5 l
179.10001 319.5 l
S
1 J
1 j
0.60000002 i
219 316.5 m
243.10001 316.5 l
S
0 J
0 j
0 i
251.10001 316.5 m
243.10001 316.5 l
243.10001 313.5 m
251.10001 316.5 l
243.10001 319.5 l
S
1 J
1 j
0.60000002 i
283 316.5 m
307.10001 316.5 l
S
0 J
0 j
0 i
315.10001 316.5 m
307.10001 316.5 l
307.10001 313.5 m
315.10001 316.5 l
307.10001 319.5 l
S
1 J
1 j
0.60000002 i
347 316.5 m
371.10001 316.5 l
S
0 J
0 j
0 i
379.10001 316.5 m
371.10001 316.5 l
371.10001 313.5 m
379.10001 316.5 l
371.10001 319.5 l
S
1 J
1 j
0.60000002 i
411 316.5 m
435.10001 316.5 l
S
0 J
0 j
0 i
443.10001 316.5 m
435.10001 316.5 l
435.10001 313.5 m
443.10001 316.5 l
435.10001 319.5 l
S
1 J
1 j
0.60000002 i
475 316.5 m
499.10001 316.5 l
S
0 J
0 j
0 i
507.10001 316.5 m
499.10001 316.5 l
499.10001 313.5 m
507.10001 316.5 l
499.10001 319.5 l
S
1 1 1 sc
CM
114 227 m
129 212.5 l
114 198 l
99 212.5 l
h
114 227 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -124 434 cm
238 207 m
253 221.5 l
238 236 l
223 221.5 l
h
238 207 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 114 212.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-4.5 5.486001 m
(!)s
/Cs1 SC
1 1 1 sc
CM
303 227 m
318 212.5 l
303 198 l
288 212.5 l
h
303 227 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -124 434 cm
427 207 m
442 221.5 l
427 236 l
412 221.5 l
h
427 207 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 303 212.5 cm
-4.5 5.486001 m
(!)s
1 0 0 -1 114 169.79747 cm
/F1.1[ 18 0 0 -18 0 0]sf
-9 6.2480011 m
(")s
/Cs1 SC
0.80000001 0.80000001 0.80000001 sc
CM
1 152 m
31 152 l
31 142 l
1 142 l
h
1 152 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
125 282 m
155 282 l
155 292 l
125 292 l
h
125 282 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
65 152 m
95 152 l
95 142 l
65 142 l
h
65 152 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
189 282 m
219 282 l
219 292 l
189 292 l
h
189 282 m
S
0 i
0.60000002 0.60000002 0.60000002 sc
CM
129 152 m
159 152 l
159 142 l
129 142 l
h
129 152 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
253 282 m
283 282 l
283 292 l
253 292 l
h
253 282 m
S
0 i
1 1 1 sc
CM
193 152 m
223 152 l
223 142 l
193 142 l
h
193 152 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
317 282 m
347 282 l
347 292 l
317 292 l
h
317 282 m
S
0 i
0.60000002 0.60000002 0.60000002 sc
CM
257 152 m
287 152 l
287 142 l
257 142 l
h
257 152 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
381 282 m
411 282 l
411 292 l
381 292 l
h
381 282 m
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
321 152 m
351 152 l
351 142 l
321 142 l
h
321 152 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
445 282 m
475 282 l
475 292 l
445 292 l
h
445 282 m
S
0 0 0 sc
147.48091 282 m
220.90085 232.92851 l
S
0 J
0 j
0 i
227.55203 228.48308 m
220.90085 232.92851 l
219.23381 230.43433 m
227.55203 228.48308 l
222.56789 235.4227 l
S
1 J
1 j
0.60000002 i
324.82443 282 m
254.83925 233.23373 l
S
0 J
0 j
0 i
248.27556 228.6601 m
254.83925 233.23373 l
253.12413 235.69511 m
248.27556 228.6601 l
256.55435 230.77235 l
S
1 J
1 j
0.60000002 i
398.36642 282 m
418.05643 240.3969 l
S
0 J
0 j
0 i
421.47876 233.16586 m
418.05643 240.3969 l
415.34479 239.11353 m
421.47876 233.16586 l
420.76807 241.68027 l
S
1 J
1 j
0.60000002 i
457.48093 282 m
436.36713 240.09232 l
S
0 J
0 j
0 i
432.76761 232.94785 m
436.36713 240.09232 l
433.68796 241.44214 m
432.76761 232.94785 l
439.0463 238.74251 l
S
0.2 0.2 0.2 sc
CM
193.09972 283.90515 m
223.09972 283.90515 l
223.09972 267.90515 l
193.09972 267.90515 l
h
193.09972 283.90515 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
317.09973 150.09483 m
347.09973 150.09483 l
347.09973 166.09483 l
317.09973 166.09483 l
h
317.09973 150.09483 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
250.09972 283.90515 m
280.09973 283.90515 l
280.09973 267.90515 l
250.09972 267.90515 l
h
250.09972 283.90515 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
374.09973 150.09483 m
404.09973 150.09483 l
404.09973 166.09483 l
374.09973 166.09483 l
h
374.09973 150.09483 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
307.09973 283.90515 m
337.09973 283.90515 l
337.09973 267.90515 l
307.09973 267.90515 l
h
307.09973 283.90515 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
431.09973 150.09483 m
461.09973 150.09483 l
461.09973 166.09483 l
431.09973 166.09483 l
h
431.09973 150.09483 m
S
0 0 0 sc
426.97327 207.02583 m
426.9422 190.19795 l
S
0 J
0 j
0 i
426.92743 182.19797 m
426.9422 190.19795 l
423.94223 190.20349 m
426.92743 182.19797 l
429.9422 190.19241 l
S
1 J
1 j
0.60000002 i
475 304.75485 m
483.24146 296.33481 491.83847 283.40027 492 265.99219 c
492.31155 232.41833 473.14401 223.61549 461.09973 197.99219 c
458.22272 191.87163 456.05756 187.39445 454.42828 184.12479 c
S
0 J
0 j
0 i
450.435 177.19424 m
454.42896 184.12593 l
451.82956 185.62367 m
450.435 177.19424 l
457.02832 182.6282 l
S
1 J
1 j
0.60000002 i
238.33759 207.32632 m
239.51195 197.30891 243.0542 183.99185 253 174.29114 c
269.39972 158.29555 283.599 162.81879 297.53696 160.29158 c
S
0 J
0 j
0 i
305.26459 158.2188 m
297.53772 160.29138 l
296.7605 157.39381 m
305.26459 158.2188 l
298.31494 163.18895 l
S
1 J
1 j
[
1
5
] 0 d
0.60000002 i
361 127.99219 m
361.5 419.5 l
362.08411 378.50781 l
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
222.16725 367.16724 m
228.61093 360.7236 228.61093 350.2764 222.16725 343.83276 c
215.7236 337.38907 205.2764 337.38907 198.83275 343.83276 c
192.38907 350.2764 192.38907 360.7236 198.83275 367.16724 c
205.2764 373.61093 215.7236 373.61093 222.16725 367.16724 c
f
[] 0 d
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
346.16724 66.832748 m
352.61093 73.276398 352.61093 83.723602 346.16724 90.167252 c
339.7236 96.610931 329.2764 96.610931 322.83276 90.167252 c
316.38907 83.723602 316.38907 73.276398 322.83276 66.832748 c
329.2764 60.389072 339.7236 60.389072 346.16724 66.832748 c
S
0 i
0.80000001 0.80000001 0.80000001 sc
CM
324.66867 367.16724 m
331.11234 360.7236 331.11234 350.2764 324.66867 343.83276 c
318.22501 337.38907 307.7778 337.38907 301.33417 343.83276 c
294.8905 350.2764 294.8905 360.7236 301.33417 367.16724 c
307.7778 373.61093 318.22501 373.61093 324.66867 367.16724 c
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
448.66867 66.832748 m
455.11234 73.276398 455.11234 83.723602 448.66867 90.167252 c
442.22501 96.610931 431.7778 96.610931 425.33417 90.167252 c
418.8905 83.723602 418.8905 73.276398 425.33417 66.832748 c
431.7778 60.389072 442.22501 60.389072 448.66867 66.832748 c
S
0 0 0 sc
377.85187 142.09483 m
349.37183 100.31618 l
S
0 J
0 j
0 i
344.86572 93.705963 m
349.37183 100.31618 l
346.89301 102.00597 m
344.86572 93.705963 l
351.85068 98.626389 l
S
1 J
1 j
0.60000002 i
398.96774 142.09483 m
423.44901 101.16051 l
S
0 J
0 j
0 i
427.55521 94.294708 m
423.44901 101.16051 l
420.87433 99.620697 m
427.55521 94.294708 l
426.02368 102.70033 l
S
/Cs2 SC
0 sc
1 0 0 -1 212.5 357.5 cm
/F1.1[ 14 0 0 -14 0 0]sf
-13.356 4.8040009 m
(#$%&)[ 7.000000 7.518000 8.302000 0.000000 ] xS
1 0 0 -1 314.5014 357.5 cm
-9.849 4.8040009 m
('\(\)&)[ 8.036000 4.662000 3.108000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
354 77 m
444 77 l
444 50 l
354 50 l
h
354 77 m
f
1 J
1 j
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
478 357 m
568 357 l
568 384 l
478 384 l
h
478 357 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
363 71.492188 m
393 71.492188 l
393 55.492188 l
363 55.492188 l
h
363 71.492188 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
487 362.50781 m
517 362.50781 l
517 378.50781 l
487 378.50781 l
h
487 362.50781 m
S
0 i
0.40000001 0.40000001 0.40000001 sc
CM
405 71.492188 m
435 71.492188 l
435 55.492188 l
405 55.492188 l
h
405 71.492188 m
f
0.60000002 i
0.5 0.5 0.5 sc
1 0 0 -1 -124 434 cm
529 362.50781 m
559 362.50781 l
559 378.50781 l
529 378.50781 l
h
529 362.50781 m
S
0 0 0 sc
523.25 357 m
523.51117 342.89832 l
S
0 J
0 j
0 i
523.65924 334.89969 m
523.51117 342.89832 l
520.51166 342.84274 m
523.65924 334.89969 l
526.51062 342.95386 l
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
329.98788 94.374161 m
325.54858 117.4164 324.01233 163.70345 361 221 c
397.15115 277.00073 458.59561 325.69217 494.52209 351.30737 c
S
0 J
0 j
[] 0 d
0 i
501.06833 355.90759 m
494.52289 351.30792 l
496.24774 348.85336 m
501.06833 355.90759 l
492.798 353.76248 l
S
1 J
1 j
[
4
4
] 0 d
0.60000002 i
450.49554 87.99987 m
478.15564 108.53049 540.25769 160.36227 559 224 c
574.7868 277.60254 555.00049 323.24884 539.11285 348.74438 c
S
0 J
0 j
[] 0 d
0 i
534.70007 355.41534 m
539.11371 348.74304 l
541.61584 350.39816 m
534.70007 355.41534 l
536.61163 347.08792 l
S
/Cs3 SC
0 sc
1 0 0 -1 114 15.5 cm
/F1.1[ 16 0 0 -16 0 0]sf
-29.927999 5.776001 m
(*+,'-$\()[ 9.776000 8.896000 8.592000 9.184000 9.488000 8.592000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 336 15.5 cm
-30.52 5.776001 m
(.$,'-$\()[ 11.264000 8.592000 8.592000 9.184000 9.488000 8.592000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
