\section{Related Work}
%\KZ{I think this section is unnecessary, these refs can be included at
%relevant places in the intro.}
cut{
This paper implements an easy-first dependency parsing framework.
There is an earlier attempt inspired by
the same intuition~\cite{goldberg2010efficient},
whose framework is totally different from ours.
It is an adaptation of transition-based
parser with redefined actions and deals with projective parsing.
It inherits another key idea in Malt that it tries to add an arc between adjacent words in a dynamically updated context.
The process to build every arc score is regarded as
a transition action. Every step it
takes an action with the highest score and deletes the dependent word
from word sequence to maintain the context information.
However, this also brings out the same problem with Malt that
candidate heads are all locally chosen. Though there are some fixes to deal with non-projective trees,
the performance on non-projective languages is not as good as graph-based methods.
%\KZ{How is this diff from ours?}
}
Previous work of combining graph-based and transition-based parser includes
ensemble system \cite{Sagae:2006:PCR:1614049.1614082}
and feature-based\cite{nivre2008integrating} systems.
The most common efforts on combining directly define features on
the parsing results of different
parsers to guide another parser or re-rank the parse trees of several parsers.

Beam parser \cite{zhang2008tale} defines the decoding as search and
proposes a beam search framework.
It either searches for arcs or actions depending on which kind of
scorer(graph-based or transition-based) is used.
This work also combines the two scorers under a beam search for actions.
Our framework also combines the graph-based and transition-based
approaches, but we use the idea of \textit{sequence} to bridge
their gaps.
%\KZ{rephase the next two sentences.}
We generate transition-based process sequence to guide a greedy
high order graph-based decoder.

