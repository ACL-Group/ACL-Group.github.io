%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 20 292 575 499
%%Creator: yExport 1.2
%%Producer: org.freehep.graphicsio.ps.PSGraphics2D Revision: 12753 
%%For: 
%%Title: 
%%CreationDate: Tuesday, November 27, 2012 11:48:27 AM CST
%%LanguageLevel: 3
%%EndComments
%%BeginProlog
100 dict dup begin

%
% File: org/freehep/graphicsio.ps/PSProlog.txt
% Author: Charles Loomis
%

% Redefinitions which save some space in the output file.  These are also
% the same as the PDF operators.
/q {gsave} def
/Q {grestore} def

/n {newpath} def
/m {moveto} def
/l {lineto} def
/c {curveto} def
/h {closepath} def

/re {4 -2 roll moveto
     dup 0 exch rlineto exch 0 rlineto
     neg 0 exch rlineto closepath} def

/f {fill} def
/f* {eofill} def
/F {gsave vg&FC fill grestore} def
/F* {gsave vg&FC eofill grestore} def

/s {closepath stroke} def
/S {stroke} def

/b {closepath gsave vg&FC fill grestore
    gsave stroke grestore newpath} def
/B {gsave vg&FC fill grestore gsave stroke grestore newpath} def
/b* {closepath gsave vg&FC eofill grestore
    gsave stroke grestore newpath} def
/B* {gsave vg&FC eofill grestore gsave stroke grestore newpath} def

/g {1 array astore /vg&fcolor exch def} def
/G {setgray} def
/k {4 array astore /vg&fcolor exch def} def
/K {setcmykcolor} def
/rg {3 array astore /vg&fcolor exch def} def
/RG {setrgbcolor} def

% Initialize the fill color.
0 0 0 rg

/vg&FC {mark vg&fcolor aload pop
        counttomark 1 eq {G} if
        counttomark 3 eq {RG} if
        counttomark 4 eq {K} if
        cleartomark } def

/vg&DFC {/vg&fcolor exch def} def

/vg&C {mark exch aload pop
       counttomark 1 eq {G} if
       counttomark 3 eq {RG} if
       counttomark 4 eq {K} if
       cleartomark } def

/w {setlinewidth} def
/j {setlinejoin} def
/J {setlinecap} def
/M {setmiterlimit} def
/d {setdash} def
/i {setflat} def

/W {clip} def
/W* {eoclip} def

% Setup the default graphics state.
% (black; 1 pt. linewidth; miter join; butt-ends; solid)
/defaultGraphicsState {0 g 1 w 0 j 0 J [] 0 d} def

% Emulation of the rectangle operators for PostScript implementations
% which do not implement all Level 2 features.  This is an INCOMPLETE
% emulation; only the "x y width height rect..." form is emulated.
/*rf {gsave newpath re fill grestore} def
/*rs {gsave newpath re stroke grestore} def
/*rc {newpath re clip} def
/rf  /rectfill where {pop /rectfill}{/*rf} ifelse load def
/rs  /rectstroke where {pop /rectstroke}{/*rs} ifelse load def
/rc  /rectclip where {pop /rectclip}{/*rc} ifelse load def

% Emulation of the selectfont operator.  This includes a 20% increase in
% the fontsize which is necessary to get sizes similar to the Java fonts.
/*sf {exch findfont exch
      dup type /arraytype eq {makefont}{scalefont} ifelse setfont} bind def
/sf /selectfont where {pop {1.2 mul selectfont}}{{1.2 mul *sf}} ifelse def

% Special version of stroke which allows the dash pattern to continue
% across path segments.  (This may be needed for PostScript although
% modern printers seem to do this correctly.)
/vg&stroke {
  currentdash pop length 0 eq
  {stroke}
  {
    currentdash /vg&doffset exch def pop
    flattenpath
    {m vg&resetdash}
    {2 copy
     currentpoint
     3 -1 roll sub dup mul
     3 1 roll sub dup mul
     add sqrt
     3 1 roll l
     currentdash 3 -1 roll add setdash}
     {}
     {h vg&resetdash}
     pathforall
     stroke
     vg&resetdash
  } ifelse
} def
/vg&resetdash {currentdash pop vg&doffset setdash} def

% Initialize variables for safety.
/delta 0 def
/xv 0 def  /yv 0 def  /width 0 def  /height 0 def

% Initialize to portrait INTERNATIONAL (Letter-height, A4-width) page.
/pw 595 def  /ph 791  def  /po true def /ftp false def

% Initialize margins to 20 points.
/ml 20 def  /mr 20 def  /mt 20 def  /mb 20 def

% Temporary matrices.
/smatrix 0 def  /nmatrix 0 def

% set page size (usage: <page width><page height> setpagesize)
/setpagesize {/ph exch def /pw exch def} def

% set page orientation (usage: portrait or landscape)
/portrait {/po true def} def
/landscape {/po false def} def

% force natural size for image (usage: naturalsize)
/naturalsize {/ftp false def} def

% resize image to fill page (usage: fittopage)
/fittopage {/ftp true def} def

% set margins of the page (usage: <left><bottom><top><right> setmargins)
/setmargins {/mr exch def /mt exch def /mb exch def /ml exch def} def

% set the graphic's size (usage: <width><height> setsize)
/setsize {/gh exch def /gw exch def} def

% set the graphic's origin (usage: <x0><y0> setorigin)
/setorigin {/gy exch def /gx exch def} def

% calculate image center
/imagecenter {pw ml sub mr sub 2 div ml add
              ph mt sub mb sub 2 div mb add} def

% calculate the necessary scaling
/imagescale {po {gw}{gh} ifelse pw ml sub mr sub div
             po {gh}{gw} ifelse ph mt sub mb sub div
             2 copy lt {exch} if pop
             ftp not {1 2 copy lt {exch} if pop} if
             1 exch div /sfactor exch def
             /gw gw sfactor mul def /gh gh sfactor mul def} def

% calculate image origin
/imageorigin {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div po {add}{sub} ifelse} def

% calculate the clipping origin
/cliporigin  {pw ml sub mr sub 2 div ml add
              po {gw}{gh} ifelse 2 div sub floor
              ph mt sub mb sub 2 div mb add
              po {gh}{gw} ifelse 2 div sub floor} def

% Set the clipping region to the bounding box.
/cliptobounds {cliporigin po {gw}{gh} ifelse 1 add
                          po {gh}{gw} ifelse 1 add rc} def

% set the base transformation matrix (usage: setbasematrix)
/setbasematrix {imageorigin translate
                po {0}{90} ifelse rotate
                sfactor sfactor neg scale
                /defaultmatrix matrix currentmatrix def} def

% The lower-right bias in drawing 1 pt. wide lines.
/bias  {q 0.5 0.5 translate} def
/unbias {Q} def

% Define the composite fonts used to print Unicode strings.
% Undefine particular values in an encoding array.
/vg&undef { {exch dup 3 -1 roll /.notdef put} forall } def
/vg&redef { {3 -1 roll dup 4 2 roll put} forall } def

% usage: key encoding basefontname vg&newbasefont font
/vg&newbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    currentdict
  end
definefont
} def

% usage: key encoding basefontname vg&newskewedbasefont font
/vg&newskewedbasefont {
findfont dup length dict copy
  begin
    currentdict /FID undef
    /Encoding exch def
    dup /FontName exch def
    exch FontMatrix exch matrix concatmatrix /FontMatrix exch def
    currentdict
  end
definefont
} def

% usage: basekey suffix vg&nconcat name
/vg&nconcat {
  2 {dup length string cvs exch} repeat
  dup length 3 -1 roll dup length 3 -1 roll add string
  dup 0 4 -1 roll dup length 5 1 roll putinterval
  dup 4 -2 roll exch putinterval cvn
} def

%usage: fontname vg&skewmatrix matrix
/vg&skewmatrix {
findfont dup /FontInfo known
  {
    /FontInfo get dup /ItalicAngle known
    {
      [ 1 0 4 -1 roll /ItalicAngle get neg dup sin exch cos div 1 0 0 ]
    }
    {pop matrix} ifelse
  }
  {pop matrix} ifelse
} def

% usage: newfontname basefontname vg&newcompositefont --
/vg&newcompositefont {
/vg&fstyle exch def
/vg&bfont exch def
/vg&fname exch def
<<
/FontStyleBits vg&fstyle
/FontType 0
/FontMatrix matrix
/FontName vg&fname
/FMapType 2
/Encoding [ 0 1 255 {pop 6} for ]
          dup 16#00 0 put % Latin
          dup 16#03 1 put % Greek
          dup 16#20 2 put % Punctuation
          dup 16#21 3 put % Arrows
          dup 16#22 4 put % MathOps
          dup 16#27 5 put % Dingbats

/FDepVector [
vg&bfont /-UC-Latin vg&nconcat UCLatinEncoding
vg&bfont vg&newbasefont

vg&bfont vg&skewmatrix
vg&bfont /-UC-Greek vg&nconcat UCGreekEncoding
/Symbol vg&newskewedbasefont

vg&bfont /-UC-Punctuation vg&nconcat UCPunctuationEncoding
vg&bfont vg&newbasefont

/Arrows-UC findfont
/MathOps-UC findfont
/Dingbats-UC findfont
/Undefined-UC findfont ]
>>
vg&fname exch definefont pop
} def

% Null encoding vector (all elements set to .notdef)
/NullEncoding [ 256 {/.notdef} repeat ] def

% Unicode Latin encoding (unicode codes \u0000-\u00ff)
/UCLatinEncoding
  ISOLatin1Encoding dup length array copy
  dup 16#60 /grave put
  [ 16#90 16#91 16#92 16#93 16#94 16#95 16#96
    16#97 16#98 16#9a 16#9b 16#9d 16#9e 16#9f
  ] vg&undef
  def

% Unicode Greek encoding (unicode codes \u0370-\u03ff)
/UCGreekEncoding
  NullEncoding dup length array copy
  << 16#91 /Alpha    16#92 /Beta      16#93 /Gamma    16#94 /Delta
     16#95 /Epsilon  16#96 /Zeta      16#97 /Eta      16#98 /Theta
     16#99 /Iota     16#9a /Kappa     16#9b /Lambda   16#9c /Mu
     16#9d /Nu       16#9e /Xi        16#9f /Omicron  16#a0 /Pi
     16#a1 /Rho      16#a3 /Sigma     16#a4 /Tau      16#a5 /Upsilon
     16#a6 /Phi      16#a7 /Chi       16#a8 /Psi      16#a9 /Omega
     16#b1 /alpha    16#b2 /beta      16#b3 /gamma    16#b4 /delta
     16#b5 /epsilon  16#b6 /zeta      16#b7 /eta      16#b8 /theta
     16#b9 /iota     16#ba /kappa     16#bb /lambda   16#bc /mu
     16#bd /nu       16#be /xi        16#bf /omicron  16#c0 /pi
     16#c1 /rho      16#c2 /sigma1    16#c3 /sigma    16#c4 /tau
     16#c5 /upsilon  16#c6 /phi1      16#c7 /chi      16#c8 /psi
     16#c9 /omega    16#7e /semicolon 16#87 /dotmath  16#d1 /theta1
     16#d2 /Upsilon1 16#d5 /phi       16#d6 /omega1
  >> vg&redef
  def

% Unicode punctuation encoding (unicode codes \u2000-\u206f)
/UCPunctuationEncoding
  NullEncoding dup length array copy
  << 16#10 /hyphen          16#11 /hyphen              16#12 /endash
     16#13 /emdash          16#18 /quoteleft           16#19 /quoteright
     16#1a /quotesinglbase  16#1b /quotesingle         16#1c /quotedblleft
     16#1d /quotedblright   16#1e /quotedblbase        16#1f /quotedbl
     16#20 /dagger          16#21 /daggerdbl           16#22 /bullet
     16#24 /period          16#26 /ellipsis            16#27 /periodcentered
     16#30 /perthousand     16#44 /fraction
     16#70 /zerosuperior    16#74 /foursuperior        16#75 /fivesuperior
     16#76 /sixsuperior     16#77 /sevensuperior       16#78 /eightsuperior
     16#79 /ninesuperior    16#7b /hyphensuperior      16#7d /parenleftsuperior
     16#7e /parenrightsuperior
     16#80 /zeroinferior    16#84 /fourinferior        16#85 /fiveinferior
     16#81 /oneinferior     16#82 /twoinferior         16#83 /threeinferior
     16#86 /sixinferior     16#87 /seveninferior       16#88 /eightinferior
     16#89 /nineinferior    16#8b /hypheninferior      16#8d /parenleftinferior
     16#8e /parenrightinferior
  >> vg&redef
  def

% Unicode mathematical operators encoding (unicode codes \u2200-\u22ff)
/UCMathOpsEncoding
  NullEncoding dup length array copy
  << 16#00 /universal       16#02 /partialdiff         16#03 /existential
     16#05 /emptyset        16#06 /Delta               16#07 /gradient
     16#08 /element         16#09 /notelement          16#0b /suchthat
     16#0f /product         16#11 /summation           16#12 /minus
     16#15 /fraction        16#17 /asteriskmath        16#19 /bullet
     16#1a /radical         16#1d /proportional        16#1e /infinity
     16#20 /angle           16#23 /bar                 16#27 /logicaland
     16#28 /logicalor       16#29 /intersection        16#2a /union
     16#2b /integral        16#34 /therefore           16#36 /colon
     16#3c /similar         16#45 /congruent           16#48 /approxequal
     16#60 /notequal        16#61 /equivalence         16#64 /lessequal
     16#65 /greaterequal    16#82 /propersubset        16#83 /propersuperset
     16#86 /reflexsubset    16#87 /reflexsuperset      16#95 /circleplus
     16#97 /circlemultiply  16#a5 /perpendicular       16#03 /existential
     16#c0 /logicaland      16#c1 /logicalor           16#c2 /intersection
     16#c3 /union           16#c4 /diamond             16#c5 /dotmath
  >> vg&redef
  def

% Unicode arrows encoding (unicode codes \u2190-\u21ff)
% Also includes those "Letterlike" unicode characters
% which are available in the symbol font. (unicode codes \u2100-\u214f)
/UCArrowsEncoding
  NullEncoding dup length array copy
  << 16#11 /Ifraktur        16#1c /Rfraktur            16#22 /trademarkserif
     16#35 /aleph
     16#90 /arrowleft       16#91 /arrowup             16#92 /arrowright
     16#93 /arrowdown       16#94 /arrowboth           16#d0 /arrowdblleft
     16#d1 /arrowdblup      16#d2 /arrowdblright       16#d3 /arrowdbldown
     16#d4 /arrowdblboth
  >> vg&redef
  def

/ZapfDingbats findfont /Encoding get
dup length array copy /UCDingbatsEncoding exch def
16#20 1 16#7f {
  dup 16#20 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
16#a0 1 16#ff {
  dup 16#40 sub exch
  UCDingbatsEncoding exch get
  UCDingbatsEncoding 3 1 roll put
} for
UCDingbatsEncoding [ 16#c0 1 16#ff {} for ] vg&undef
[ 16#00  16#05 16#0a 16#0b  16#28 16#4c 16#4e  16#53 16#54 16#55  16#57 16#5f
  16#60  16#68 16#69 16#6a  16#6b 16#6c 16#6d  16#6e 16#6f 16#70  16#71 16#72
  16#73  16#74 16#75 16#95  16#96 16#97 16#b0  16#bf
] vg&undef pop

% Define the base fonts which don't change.
/Undefined-UC NullEncoding       /Helvetica    vg&newbasefont pop
/MathOps-UC   UCMathOpsEncoding  /Symbol       vg&newbasefont pop
/Arrows-UC    UCArrowsEncoding   /Symbol       vg&newbasefont pop
/Dingbats-UC  UCDingbatsEncoding /ZapfDingbats vg&newbasefont pop

% Make the SansSerif composite fonts.
/SansSerif /Helvetica 16#00 vg&newcompositefont
/SansSerif-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/SansSerif-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/SansSerif-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the Serif composite fonts.
/Serif /Times-Roman 16#00 vg&newcompositefont
/Serif-Bold /Times-Bold 16#01 vg&newcompositefont
/Serif-Italic /Times-Italic 16#02 vg&newcompositefont
/Serif-BoldItalic /Times-BoldItalic 16#03 vg&newcompositefont

% Make the Monospaced composite fonts.
/Monospaced /Courier 16#00 vg&newcompositefont
/Monospaced-Bold /Courier-Bold 16#01 vg&newcompositefont
/Monospaced-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Monospaced-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Dialog composite fonts.
/Dialog /Helvetica 16#00 vg&newcompositefont
/Dialog-Bold /Helvetica-Bold 16#01 vg&newcompositefont
/Dialog-Italic /Helvetica-Oblique 16#02 vg&newcompositefont
/Dialog-BoldItalic /Helvetica-BoldOblique 16#03 vg&newcompositefont

% Make the DialogInput composite fonts.
/DialogInput /Courier 16#00 vg&newcompositefont
/DialogInput-Bold /Courier-Bold 16#01 vg&newcompositefont
/DialogInput-Italic /Courier-Oblique 16#02 vg&newcompositefont
/DialogInput-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont

% Make the Typewriter composite fonts (JDK 1.1 only).
/Typewriter /Courier 16#00 vg&newcompositefont
/Typewriter-Bold /Courier-Bold 16#01 vg&newcompositefont
/Typewriter-Italic /Courier-Oblique 16#02 vg&newcompositefont
/Typewriter-BoldItalic /Courier-BoldOblique 16#03 vg&newcompositefont


/cfontH {
 dup /fontsize exch def /SansSerif exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHB {
  dup /fontsize exch def /SansSerif-Bold exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHI {
 dup /fontsize exch def /SansSerif-Italic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def
/cfontHBI {
 dup /fontsize exch def /SansSerif-BoldItalic exch sf
 /vg&fontstyles [{cfontH} {cfontHB} {cfontHI} {cfontHBI}] def
} def

/cfontT {
 dup /fontsize exch def /Serif exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTB {
 dup /fontsize exch def /Serif-Bold exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTI {
 dup /fontsize exch def /Serif-Italic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def
/cfontTBI {
 dup /fontsize exch def /Serif-BoldItalic exch sf
 /vg&fontstyles [{cfontT} {cfontTB} {cfontTI} {cfontTBI}] def
} def

/cfontC {
 dup /fontsize exch def /Typewriter exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCB {
 dup /fontsize exch def /Typewriter-Bold exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCI {
 dup /fontsize exch def /Typewriter-Italic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def
/cfontCBI {
 dup /fontsize exch def /Typewriter-BoldItalic exch sf
 /vg&fontstyles [{cfontC} {cfontCB} {cfontCI} {cfontCBI}] def
} def

% Darken or lighten the current color.
/darken {0.7 exch exp 3 copy
         q 4 -1 roll vg&C
         currentrgbcolor 3 {4 -2 roll mul} repeat
         3 array astore Q} def

/displayColorMap
<< /Cr   [1.00 0.00 0.00]       /Cg     [0.00 1.00 0.00]
   /Cb   [0.00 0.00 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.00 0.00]       /CGg    [0.00 1.00 0.00]
   /CGb  [0.00 0.00 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.00 0.00]       /CIg    [0.00 1.00 0.00]
   /CIb  [0.00 0.00 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/printColorMap
<< /Cr   [1.00 0.33 0.33]       /Cg     [0.33 1.00 0.33]
   /Cb   [0.33 0.33 1.00]       /Cc     [1.00 0.00 0.00 0.00]
   /Cm   [0.00 1.00 0.00 0.00]  /Cy     [0.00 0.00 1.00 0.00]
   /Co   [1.00 0.78 0.00]       /Cp     [1.00 0.67 0.67]
   /Cw   [1   ]                 /Cgrl   [0.75]
   /Cgr  [0.50]                 /Cgrd   [0.25]
   /Ck   [0   ]
   /CGr  [1.00 0.33 0.33]       /CGg    [0.33 1.00 0.33]
   /CGb  [0.33 0.33 1.00]       /CGc    [1.00 0.00 0.00 0.00]
   /CGm  [0.00 1.00 0.00 0.00]  /CGy    [0.00 0.00 1.00 0.00]
   /CGo  [1.00 0.78 0.00]       /CGp    [1.00 0.67 0.67]
   /CGw  [1   ]                 /CGgrl  [0.75]
   /CGgr [0.50]                 /CGgrd  [0.25]
   /CGk  [0   ]
   /CIr  [1.00 0.33 0.33]       /CIg    [0.33 1.00 0.33]
   /CIb  [0.33 0.33 1.00]       /CIc    [1.00 0.00 0.00 0.00]
   /CIm  [0.00 1.00 0.00 0.00]  /CIy    [0.00 0.00 1.00 0.00]
   /CIo  [1.00 0.78 0.00]       /CIp    [1.00 0.67 0.67]
   /CIw  [1   ]                 /CIgrl  [0.75]
   /CIgr [0.50]                 /CIgrd  [0.25]
   /CIk  [0   ]
>> def

/grayColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [0.75]                 /CGg    [1   ]
   /CGb  [0.50]                 /CGc    [0.75]
   /CGm  [0.50]                 /CGy    [1   ]
   /CGo  [0.75]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [0.25]
   /CGgr [0.50]                 /CGgrd  [0.75]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

/bwColorMap
<< /Cr   [0   ]                 /Cg     [0   ]
   /Cb   [0   ]                 /Cc     [0   ]
   /Cm   [0   ]                 /Cy     [0   ]
   /Co   [0   ]                 /Cp     [0   ]
   /Cw   [0   ]                 /Cgrl   [0   ]
   /Cgr  [0   ]                 /Cgrd   [0   ]
   /Ck   [0   ]
   /CGr  [1   ]                 /CGg    [1   ]
   /CGb  [1   ]                 /CGc    [1   ]
   /CGm  [1   ]                 /CGy    [1   ]
   /CGo  [1   ]                 /CGp    [1   ]
   /CGw  [0   ]                 /CGgrl  [1   ]
   /CGgr [1   ]                 /CGgrd  [1   ]
   /CGk  [1   ]
   /CIr  [1   ]                 /CIg    [1   ]
   /CIb  [1   ]                 /CIc    [1   ]
   /CIm  [1   ]                 /CIy    [1   ]
   /CIo  [1   ]                 /CIp    [1   ]
   /CIw  [1   ]                 /CIgrl  [1   ]
   /CIgr [1   ]                 /CIgrd  [1   ]
   /CIk  [1   ]
>> def

%
% The following routines handle the alignment of and printing of
% tagged strings.
%

% Predefine the bounding box values.
/bbllx 0 def /bblly 0 def /bburx 0 def /bbury 0 def

% This routine pops the first unicode character off of a string and returns
% the remainder of the string, the character code of first character,
% and a "true" if the string was non-zero length.
% <string>      popfirst <remaining string> <true>
% <null string> popfirst <false>
/popfirst {
  dup length 1 gt
    {dup 0 get /vg&fbyte exch def
     dup 1 get /vg&cbyte exch def
     dup length 2 sub 2 exch getinterval true}
    {pop false} ifelse
} def

% This routine shows a single unicode character given the font and
% character codes.
% <font code> <char code> unicharshow --
/unicharshow {
  2 string
  dup 0 5 -1 roll put
  dup 1 4 -1 roll put
  internalshow
} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and showing the string for recshow.
% <string> internalshow --
/internalshow {show} def

% This is an internal routine to alternate between determining the
% bounding box for stringsize and stroking various ornaments.
% <string> internalstroke --
/internalstroke {S} def

% Sets up internalshow to use the null device to determine string size.
% -- nullinternalshow --
/nullinternalshow {/internalshow {false charpath flattenpath
                                  pathbbox updatebbox} def} def

% Sets up internalstroke to use the null device to determine string size.
% -- nullinternalstroke --
/nullinternalstroke {
 /internalstroke {flattenpath pathbbox updatebbox} def} def

% This routine tests to see if the character code matches the first
% character of a string.
% <char code> <string> testchar <char code> <true or false>
/testchar {exch dup 3 -1 roll 0 get eq} def

% Raise the text baseline for superscripts.
% -- raise --
/raise {
  0 fontsize 2 div rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-raise the text baseline for superscripts.
% -- unraise --
/unraise {
  /fontsize fontsize 1.5 mul def
  0 fontsize 2 div neg rmoveto
} def

% Lower the text baseline for subscripts.
% -- lower --
/lower {
  0 fontsize 3 div neg rmoveto
  /fontsize fontsize 2 mul 3 div def
  currentfont /FontName get fontsize sf
} def

% Un-lower the text baseline for subscripts.
% -- unlower --
/unlower {
  /fontsize fontsize 1.5 mul def
  0 fontsize 3 div rmoveto
} def

% Compare the top two elements on the stack and leave only the
% larger one.
/maxval {2 copy gt {pop} {exch pop} ifelse} def

% Tokenize a string.  Do not use the usual PostScript token because
% parentheses will not be interpreted correctly because of rescanning
% of the string.
/vg&token {/vg&string exch def /vg&index -1 def /vg&level 0 def
0 2 vg&string length 2 sub {
  dup dup 1 add exch vg&string exch get 8 bitshift vg&string 3 -1 roll get or
  dup 16#f0fe eq {pop 1}{16#f0ff eq {-1}{0} ifelse} ifelse
  /vg&level exch vg&level add def
  vg&level 0 eq {/vg&index exch def exit} if pop
} for
vg&index 0 ge {
  vg&string vg&index 2 add dup vg&string length exch sub getinterval
  vg&index 2 gt {vg&string 2 vg&index 2 sub getinterval}{()} ifelse
  true}
{false} ifelse
} bind def

% Recursively show an unicode string.
% <string> recshow --
/recshow {
  popfirst
  {
    % Test to see if this is a string attribute.
    vg&fbyte 16#f0 and 16#e0 eq
    {
      q

      % Font style.
      currentfont dup /FontStyleBits known {/FontStyleBits get}{pop 0} ifelse
      vg&cbyte or vg&fontstyles exch get fontsize exch exec

      vg&token pop recshow currentpoint Q m recshow
    }
    {
      vg&fbyte 16#F8 and 16#F0 eq {

        % Superscript and/or subscript.
        vg&cbyte 16#00 eq {
          vg&token pop exch vg&token pop 3 -1 roll
          q raise recshow unraise currentpoint pop Q exch
          q lower recshow unlower currentpoint pop Q
          maxval currentpoint exch pop m recshow } if

        % Strikeout.
        vg&cbyte 16#01 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll fontsize 3 div add moveto
          fontsize 3 div add lineto internalstroke Q
          recshow} if

        % Underline.
        vg&cbyte 16#02 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dashed underline.
        vg&cbyte 16#03 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J [ vg&uthick 5 mul vg&uthick 2 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Dotted underline.
        vg&cbyte 16#04 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 1 J [ 0 vg&uthick 3 mul] 0 d
          vg&underline vg&uthick w
          currentpoint 4 -2 roll vg&uoffset add moveto
          vg&uoffset add lineto internalstroke Q
          recshow} if

        % Thick underline.
        vg&cbyte 16#05 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Gray thick underline.
        vg&cbyte 16#06 eq {
          vg&token pop currentpoint 3 -1 roll recshow
          q 0 J vg&underline vg&uthick 2 mul w 0.5 setgray
          currentpoint 4 -2 roll vg&uoffset vg&uthick 2 div sub add moveto
          vg&uoffset vg&uthick 2 div sub add lineto internalstroke Q
          recshow} if

        % Overbar.
        vg&cbyte 16#07 eq {
          vg&token pop dup stringsize relative 4 1 roll pop pop exch
          3 -1 roll recshow
          q 0 J vg&underline vg&uthick w
          vg&uoffset neg add dup currentpoint pop exch m l internalstroke Q
          recshow} if
      }
      {
        vg&fbyte vg&cbyte unicharshow recshow
      } ifelse
    } ifelse
  } if
} def

% Get the underline position and thickness from the current font.
/vg&underline {

currentfont dup /FontType get 0 eq {/FDepVector get 0 get} if
dup dup /FontInfo known {
  /FontInfo get dup
  dup /UnderlinePosition known {
    /UnderlinePosition get /vg&uoffset exch def
  }
  {
    pop /vg&uoffset 0 def
  } ifelse
  dup /UnderlineThickness known {
    /UnderlineThickness get /vg&uthick exch def
  }
  {
    pop /vg&uthick 0 def
  } ifelse
}
{
  pop /vg&uoffset 0 def /vg&uthick 0 def
} ifelse
/FontMatrix get
currentfont dup /FontType get 0 eq
{/FontMatrix get matrix concatmatrix}{pop} ifelse
dup 0 vg&uoffset 3 -1 roll transform /vg&uoffset exch def pop
0 vg&uthick 3 -1 roll transform /vg&uthick exch def pop
} def

% Make a frame with the coordinates on the stack.
% <llx> <lly> <urx> <ury> frame --
/frame {4 copy m 3 1 roll exch l 4 -2 roll l l h} def

% Resets the accumulated bounding box to a degenerate box at the
% current point.
% -- resetbbox --
/resetbbox {
  currentpoint 2 copy
  /bbury exch def
  /bburx exch def
  /bblly exch def
  /bbllx exch def
} def

% Update the accumulated bounding box.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/updatebbox {
  dup bbury gt {/bbury exch def} {pop} ifelse
  dup bburx gt {/bburx exch def} {pop} ifelse
  dup bblly lt {/bblly exch def} {pop} ifelse
  dup bbllx lt {/bbllx exch def} {pop} ifelse
} def

% Set the bounding box to the values on the stack.
% <llx'> <lly'> <urx'> <ury'> updatebbox --
/restorebbox {
  /bbury exch def /bburx exch def /bblly exch def /bbllx exch def
} def

% Push the accumulated bounding box onto the stack.
% -- pushbbox <llx> <lly> <urx> <ury>
/pushbbox {bbllx bblly bburx bbury} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> inflate <llx> <lly> <urx> <ury>
/inflate {
  2 {fontsize 0.2 mul add 4 1 roll} repeat
  2 {fontsize 0.2 mul sub 4 1 roll} repeat
} def

% Make the relative bounding box relative to the currentpoint.
% <llx'> <lly'> <urx'> <ury'> relative <llx> <lly> <urx> <ury>
/relative {
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
  currentpoint 3 -1 roll add 3 1 roll add exch 4 2 roll
} def

% Returns the size of a string appropriate for recshow.
% <string> stringsize <llx> <lly> <urx> <ury>
/stringsize {
  pushbbox /internalshow load /internalstroke load 7 -1 roll
  q
  nulldevice 0 0 m
  nullinternalshow nullinternalstroke
  resetbbox
  recshow
  /internalstroke exch def /internalshow exch def
  pushbbox 8 -4 roll restorebbox
  Q
} def

% Calculate values for string positioning.
/calcval {4 copy
  3 -1 roll sub /widy exch def sub neg /widx exch def
  pop pop /dy exch def /dx exch def} def

% Utilities to position a string.
% First letter (U=upper, C=center, B=baseline, L=lower)
% Second letter (L=left, C=center, R=right)
/align [
{calcval dx neg widy dy add neg rmoveto} % UL
{calcval dx neg widy 2 div dy add neg rmoveto} % CL
{calcval dx neg 0 rmoveto} % BL
{calcval dx neg dy neg rmoveto} % LL
{calcval widx dx add neg widy dy add neg rmoveto} % UR
{calcval widx dx add neg widy 2 div dy add neg rmoveto} % CR
{calcval widx dx add neg 0 rmoveto} % BR
{calcval widx dx add neg dy neg rmoveto} % LR
{calcval widx 2 div dx add neg widy dy add neg rmoveto} % UC
{calcval widx 2 div dx add neg widy 2 div dy add neg rmoveto} % CC
{calcval widx 2 div dx add neg 0 rmoveto} % BC
{calcval widx 2 div dx add neg dy neg rmoveto} % LC
] def

/vg&str {m q 1 -1 scale dup stringsize 4 copy align 11 -1 roll get exec
         q inflate relative frame exch exec Q recshow Q} def

end /procDict exch def
%%EndProlog

%%BeginSetup
save
procDict begin
printColorMap begin
595 791 setpagesize
20 20 20 20 setmargins
0 0 setorigin
727 271 setsize
fittopage
portrait
imagescale
cliptobounds
setbasematrix
/Helvetica 10 sf
defaultGraphicsState
%%EndSetup

0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
1.00000 1.00000 1.00000 RG
newpath
0.00000 0.00000 m
727.000 0.00000 l
727.000 271.000 l
0.00000 271.000 l
0.00000 0.00000 l
h
f
0.00000 0.00000 0.00000 RG
0 0 727 271 rc
q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] concat
[ 1.00000 0.00000 0.00000 1.00000 213.000 65.0000 ] concat
1.00000 1.00000 1.00000 RG
newpath
-213.000 -65.0000 m
514.000 -65.0000 l
514.000 206.000 l
-213.000 206.000 l
-213.000 -65.0000 l
h
f
0.00000 0.00000 0.00000 RG
[ 1.00000 0.00000 0.00000 1.00000 213.000 65.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 213.000 65.0000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
[ 1.00000 0.00000 0.00000 1.00000 213.000 65.0000 ] defaultmatrix matrix concatmatrix setmatrix
0 J
1.45000 M
newpath
81.1973 60.1309 m
87.0879 60.1309 l
94.5254 79.9746 l
102.010 60.1309 l
107.885 60.1309 l
107.885 89.2871 l
104.041 89.2871 l
104.041 63.6777 l
96.5098 83.6777 l
92.5566 83.6777 l
85.0254 63.6777 l
85.0254 89.2871 l
81.1973 89.2871 l
81.1973 60.1309 l
h
124.037 69.9277 m
122.110 69.9277 120.587 70.6803 119.467 72.1855  c
118.347 73.6908 117.787 75.7507 117.787 78.3652  c
117.787 80.9798 118.344 83.0397 119.459 84.5449  c
120.574 86.0501 122.100 86.8027 124.037 86.8027  c
125.954 86.8027 127.472 86.0475 128.592 84.5371  c
129.712 83.0267 130.271 80.9694 130.271 78.3652  c
130.271 75.7715 129.712 73.7168 128.592 72.2012  c
127.472 70.6855 125.954 69.9277 124.037 69.9277  c
h
124.037 66.8809 m
127.162 66.8809 129.615 67.8965 131.396 69.9277  c
133.178 71.9590 134.068 74.7715 134.068 78.3652  c
134.068 81.9486 133.178 84.7585 131.396 86.7949  c
129.615 88.8314 127.162 89.8496 124.037 89.8496  c
120.902 89.8496 118.443 88.8314 116.662 86.7949  c
114.881 84.7585 113.990 81.9486 113.990 78.3652  c
113.990 74.7715 114.881 71.9590 116.662 69.9277  c
118.443 67.8965 120.902 66.8809 124.037 66.8809  c
h
154.432 70.7246 m
154.432 58.8965 l
158.025 58.8965 l
158.025 89.2871 l
154.432 89.2871 l
154.432 86.0059 l
153.671 87.3079 152.715 88.2741 151.564 88.9043  c
150.413 89.5345 149.031 89.8496 147.416 89.8496  c
144.770 89.8496 142.617 88.7949 140.955 86.6855  c
139.294 84.5762 138.463 81.8027 138.463 78.3652  c
138.463 74.9277 139.294 72.1543 140.955 70.0449  c
142.617 67.9355 144.770 66.8809 147.416 66.8809  c
149.031 66.8809 150.413 67.1960 151.564 67.8262  c
152.715 68.4564 153.671 69.4225 154.432 70.7246  c
h
142.182 78.3652 m
142.182 81.0111 142.726 83.0866 143.814 84.5918  c
144.903 86.0970 146.395 86.8496 148.291 86.8496  c
150.197 86.8496 151.697 86.0970 152.791 84.5918  c
153.885 83.0866 154.432 81.0111 154.432 78.3652  c
154.432 75.7194 153.885 73.6465 152.791 72.1465  c
151.697 70.6465 150.197 69.8965 148.291 69.8965  c
146.395 69.8965 144.903 70.6465 143.814 72.1465  c
142.726 73.6465 142.182 75.7194 142.182 78.3652  c
h
165.057 80.6465 m
165.057 67.4121 l
168.650 67.4121 l
168.650 80.5215 l
168.650 82.5840 169.054 84.1335 169.861 85.1699  c
170.669 86.2064 171.880 86.7246 173.494 86.7246  c
175.432 86.7246 176.963 86.1074 178.088 84.8730  c
179.213 83.6387 179.775 81.9538 179.775 79.8184  c
179.775 67.4121 l
183.369 67.4121 l
183.369 89.2871 l
179.775 89.2871 l
179.775 85.9277 l
178.900 87.2507 177.887 88.2350 176.736 88.8809  c
175.585 89.5267 174.249 89.8496 172.729 89.8496  c
170.218 89.8496 168.312 89.0684 167.010 87.5059  c
165.708 85.9434 165.057 83.6569 165.057 80.6465  c
h
190.768 58.8965 m
194.361 58.8965 l
194.361 89.2871 l
190.768 89.2871 l
190.768 58.8965 l
h
220.600 77.4434 m
220.600 79.2090 l
204.068 79.2090 l
204.225 81.6777 204.972 83.5605 206.311 84.8574  c
207.649 86.1543 209.506 86.8027 211.881 86.8027  c
213.266 86.8027 214.607 86.6335 215.904 86.2949  c
217.201 85.9564 218.485 85.4486 219.756 84.7715  c
219.756 88.1777 l
218.464 88.7194 217.141 89.1335 215.787 89.4199  c
214.433 89.7064 213.063 89.8496 211.678 89.8496  c
208.188 89.8496 205.423 88.8340 203.381 86.8027  c
201.339 84.7715 200.318 82.0267 200.318 78.5684  c
200.318 74.9850 201.287 72.1413 203.225 70.0371  c
205.162 67.9329 207.771 66.8809 211.053 66.8809  c
213.990 66.8809 216.316 67.8288 218.029 69.7246  c
219.743 71.6204 220.600 74.1934 220.600 77.4434  c
h
217.006 76.3965 m
216.975 74.4277 216.423 72.8574 215.350 71.6855  c
214.277 70.5137 212.855 69.9277 211.084 69.9277  c
209.084 69.9277 207.480 70.4954 206.271 71.6309  c
205.063 72.7663 204.370 74.3600 204.193 76.4121  c
217.006 76.3965 l
h
f
2 J
10.0000 M
4.00000 w
0 J
1.45000 M
newpath
0.00000 0.00000 m
300.000 0.00000 l
300.000 150.000 l
0.00000 150.000 l
0.00000 0.00000 l
h
S
1.00000 w
2 J
10.0000 M
0 J
1.45000 M
newpath
434.685 26.8357 m
433.477 26.8357 432.524 27.3044 431.826 28.2419  c
431.128 29.1794 430.779 30.4659 430.779 32.1013  c
430.779 33.7367 431.125 35.0258 431.818 35.9685  c
432.511 36.9112 433.466 37.3826 434.685 37.3826  c
435.883 37.3826 436.831 36.9112 437.529 35.9685  c
438.227 35.0258 438.576 33.7367 438.576 32.1013  c
438.576 30.4867 438.227 29.2055 437.529 28.2576  c
436.831 27.3097 435.883 26.8357 434.685 26.8357  c
h
434.685 24.9294 m
436.633 24.9294 438.164 25.5649 439.279 26.8357  c
440.393 28.1065 440.951 29.8617 440.951 32.1013  c
440.951 34.3409 440.393 36.0987 439.279 37.3748  c
438.164 38.6508 436.633 39.2888 434.685 39.2888  c
432.727 39.2888 431.190 38.6508 430.076 37.3748  c
428.961 36.0987 428.404 34.3409 428.404 32.1013  c
428.404 29.8617 428.961 28.1065 430.076 26.8357  c
431.190 25.5649 432.727 24.9294 434.685 24.9294  c
h
444.449 33.5388 m
444.449 25.2576 l
446.699 25.2576 l
446.699 33.4451 l
446.699 34.7367 446.952 35.7081 447.457 36.3591  c
447.962 37.0102 448.715 37.3357 449.715 37.3357  c
450.934 37.3357 451.895 36.9477 452.598 36.1716  c
453.301 35.3956 453.652 34.3409 453.652 33.0076  c
453.652 25.2576 l
455.902 25.2576 l
455.902 38.9294 l
453.652 38.9294 l
453.652 36.8357 l
453.111 37.6586 452.478 38.2732 451.754 38.6794  c
451.030 39.0857 450.194 39.2888 449.246 39.2888  c
447.673 39.2888 446.480 38.7992 445.668 37.8201  c
444.855 36.8409 444.449 35.4138 444.449 33.5388  c
h
462.747 21.3826 m
462.747 25.2576 l
467.372 25.2576 l
467.372 27.0076 l
462.747 27.0076 l
462.747 34.4294 l
462.747 35.5440 462.901 36.2602 463.208 36.5779  c
463.515 36.8956 464.132 37.0544 465.060 37.0544  c
467.372 37.0544 l
467.372 38.9294 l
465.060 38.9294 l
463.330 38.9294 462.135 38.6065 461.474 37.9607  c
460.812 37.3149 460.481 36.1378 460.481 34.4294  c
460.481 27.0076 l
458.841 27.0076 l
458.841 25.2576 l
460.481 25.2576 l
460.481 21.3826 l
462.747 21.3826 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
-156.536 25.2576 m
-154.286 25.2576 l
-154.286 38.9294 l
-156.536 38.9294 l
-156.536 25.2576 l
h
-156.536 19.9294 m
-154.286 19.9294 l
-154.286 22.7732 l
-156.536 22.7732 l
-156.536 19.9294 l
h
-138.231 30.6794 m
-138.231 38.9294 l
-140.481 38.9294 l
-140.481 30.7576 l
-140.481 29.4555 -140.731 28.4841 -141.231 27.8435  c
-141.731 27.2029 -142.486 26.8826 -143.496 26.8826  c
-144.715 26.8826 -145.673 27.2680 -146.371 28.0388  c
-147.069 28.8097 -147.418 29.8617 -147.418 31.1951  c
-147.418 38.9294 l
-149.684 38.9294 l
-149.684 25.2576 l
-147.418 25.2576 l
-147.418 27.3826 l
-146.887 26.5597 -146.257 25.9451 -145.528 25.5388  c
-144.798 25.1326 -143.955 24.9294 -142.996 24.9294  c
-141.434 24.9294 -140.249 25.4164 -139.442 26.3904  c
-138.634 27.3643 -138.231 28.7940 -138.231 30.6794  c
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
406.856 65.7107 m
409.560 65.7107 l
403.138 86.2419 l
400.435 86.2419 l
406.856 65.7107 l
h
f
2 J
10.0000 M
0 J
1.45000 M
newpath
-103.144 65.7107 m
-100.440 65.7107 l
-106.862 86.2419 l
-109.565 86.2419 l
-103.144 65.7107 l
h
f
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
300.000 75.0000 m
483.750 75.0000 l
S
newpath
497.500 75.0000 m
482.500 67.5000 l
482.500 82.5000 l
h
f
1.00000 w
newpath
376.233 91.1602 m
376.681 90.3581 377.218 89.7643 377.843 89.3789  c
378.468 88.9935 379.202 88.8008 380.046 88.8008  c
381.181 88.8008 382.059 89.1992 382.679 89.9961  c
383.299 90.7930 383.608 91.9258 383.608 93.3945  c
383.608 100.004 l
381.812 100.004 l
381.812 93.4570 l
381.812 92.4154 381.624 91.6393 381.249 91.1289  c
380.874 90.6185 380.306 90.3633 379.546 90.3633  c
378.619 90.3633 377.884 90.6732 377.343 91.2930  c
376.801 91.9128 376.530 92.7539 376.530 93.8164  c
376.530 100.004 l
374.718 100.004 l
374.718 93.4570 l
374.718 92.4049 374.533 91.6263 374.163 91.1211  c
373.793 90.6159 373.223 90.3633 372.452 90.3633  c
371.535 90.3633 370.806 90.6732 370.265 91.2930  c
369.723 91.9128 369.452 92.7539 369.452 93.8164  c
369.452 100.004 l
367.640 100.004 l
367.640 89.0664 l
369.452 89.0664 l
369.452 90.7695 l
369.858 90.0924 370.348 89.5951 370.921 89.2773  c
371.494 88.9596 372.176 88.8008 372.968 88.8008  c
373.759 88.8008 374.434 89.0039 374.991 89.4102  c
375.549 89.8164 375.963 90.3997 376.233 91.1602  c
h
392.169 94.5039 m
390.711 94.5039 389.703 94.6706 389.146 95.0039  c
388.588 95.3372 388.310 95.9049 388.310 96.7070  c
388.310 97.3424 388.521 97.8477 388.942 98.2227  c
389.364 98.5977 389.935 98.7852 390.653 98.7852  c
391.653 98.7852 392.453 98.4310 393.052 97.7227  c
393.651 97.0143 393.950 96.0768 393.950 94.9102  c
393.950 94.5039 l
392.169 94.5039 l
h
395.747 93.7695 m
395.747 100.004 l
393.950 100.004 l
393.950 98.3477 l
393.544 99.0039 393.034 99.4909 392.419 99.8086  c
391.804 100.126 391.054 100.285 390.169 100.285  c
389.054 100.285 388.166 99.9701 387.505 99.3398  c
386.843 98.7096 386.513 97.8685 386.513 96.8164  c
386.513 95.5872 386.924 94.6602 387.747 94.0352  c
388.570 93.4102 389.799 93.0977 391.435 93.0977  c
393.950 93.0977 l
393.950 92.9258 l
393.950 92.0924 393.679 91.4518 393.138 91.0039  c
392.596 90.5560 391.830 90.3320 390.841 90.3320  c
390.216 90.3320 389.609 90.4049 389.021 90.5508  c
388.432 90.6966 387.862 90.9206 387.310 91.2227  c
387.310 89.5664 l
387.966 89.3060 388.604 89.1133 389.224 88.9883  c
389.843 88.8633 390.445 88.8008 391.028 88.8008  c
392.612 88.8008 393.794 89.2122 394.575 90.0352  c
395.356 90.8581 395.747 92.1029 395.747 93.7695  c
h
401.190 98.3633 m
401.190 104.160 l
399.378 104.160 l
399.378 89.0664 l
401.190 89.0664 l
401.190 90.7227 l
401.565 90.0768 402.042 89.5951 402.620 89.2773  c
403.198 88.9596 403.888 88.8008 404.690 88.8008  c
406.013 88.8008 407.091 89.3294 407.925 90.3867  c
408.758 91.4440 409.175 92.8320 409.175 94.5508  c
409.175 96.2695 408.758 97.6549 407.925 98.7070  c
407.091 99.7591 406.013 100.285 404.690 100.285  c
403.888 100.285 403.198 100.126 402.620 99.8086  c
402.042 99.4909 401.565 99.0091 401.190 98.3633  c
h
407.300 94.5508 m
407.300 93.2279 407.029 92.1888 406.487 91.4336  c
405.946 90.6784 405.201 90.3008 404.253 90.3008  c
403.295 90.3008 402.545 90.6784 402.003 91.4336  c
401.461 92.1888 401.190 93.2279 401.190 94.5508  c
401.190 95.8633 401.461 96.8971 402.003 97.6523  c
402.545 98.4076 403.295 98.7852 404.253 98.7852  c
405.201 98.7852 405.946 98.4076 406.487 97.6523  c
407.029 96.8971 407.300 95.8633 407.300 94.5508  c
h
412.151 84.8008 m
413.948 84.8008 l
413.948 100.004 l
412.151 100.004 l
412.151 84.8008 l
h
427.052 94.0820 m
427.052 94.9570 l
418.802 94.9570 l
418.875 96.1966 419.244 97.1419 419.911 97.7930  c
420.578 98.4440 421.510 98.7695 422.708 98.7695  c
423.396 98.7695 424.062 98.6836 424.708 98.5117  c
425.354 98.3398 426.000 98.0872 426.646 97.7539  c
426.646 99.4414 l
426.000 99.7227 425.338 99.9336 424.661 100.074  c
423.984 100.215 423.297 100.285 422.599 100.285  c
420.849 100.285 419.466 99.7773 418.450 98.7617  c
417.435 97.7461 416.927 96.3737 416.927 94.6445  c
416.927 92.8529 417.409 91.4310 418.372 90.3789  c
419.336 89.3268 420.640 88.8008 422.286 88.8008  c
423.755 88.8008 424.916 89.2747 425.771 90.2227  c
426.625 91.1706 427.052 92.4570 427.052 94.0820  c
h
425.255 93.5508 m
425.244 92.5716 424.971 91.7904 424.435 91.2070  c
423.898 90.6237 423.187 90.3320 422.302 90.3320  c
421.302 90.3320 420.500 90.6133 419.896 91.1758  c
419.291 91.7383 418.942 92.5352 418.849 93.5664  c
425.255 93.5508 l
h
439.106 93.3945 m
439.106 100.004 l
437.310 100.004 l
437.310 93.4570 l
437.310 92.4258 437.106 91.6523 436.700 91.1367  c
436.294 90.6211 435.690 90.3633 434.888 90.3633  c
433.909 90.3633 433.140 90.6732 432.583 91.2930  c
432.026 91.9128 431.747 92.7539 431.747 93.8164  c
431.747 100.004 l
429.935 100.004 l
429.935 89.0664 l
431.747 89.0664 l
431.747 90.7695 l
432.174 90.1133 432.679 89.6211 433.263 89.2930  c
433.846 88.9648 434.518 88.8008 435.278 88.8008  c
436.539 88.8008 437.492 89.1888 438.138 89.9648  c
438.784 90.7409 439.106 91.8841 439.106 93.3945  c
h
f
3.00000 w
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
-13.7982 75.0000 m
-197.500 75.0000 l
S
newpath
-.0482178 75.0000 m
-15.0482 67.5000 l
-15.0482 82.5000 l
h
f
1.00000 w
newpath
-132.027 90.7227 m
-132.027 84.8008 l
-130.230 84.8008 l
-130.230 100.004 l
-132.027 100.004 l
-132.027 98.3633 l
-132.402 99.0091 -132.879 99.4909 -133.457 99.8086  c
-134.035 100.126 -134.725 100.285 -135.527 100.285  c
-136.850 100.285 -137.926 99.7591 -138.754 98.7070  c
-139.582 97.6549 -139.996 96.2695 -139.996 94.5508  c
-139.996 92.8320 -139.582 91.4440 -138.754 90.3867  c
-137.926 89.3294 -136.850 88.8008 -135.527 88.8008  c
-134.725 88.8008 -134.035 88.9596 -133.457 89.2773  c
-132.879 89.5951 -132.402 90.0768 -132.027 90.7227  c
h
-138.152 94.5508 m
-138.152 95.8633 -137.879 96.8971 -137.332 97.6523  c
-136.785 98.4076 -136.038 98.7852 -135.090 98.7852  c
-134.142 98.7852 -133.395 98.4076 -132.848 97.6523  c
-132.301 96.8971 -132.027 95.8633 -132.027 94.5508  c
-132.027 93.2279 -132.301 92.1888 -132.848 91.4336  c
-133.395 90.6784 -134.142 90.3008 -135.090 90.3008  c
-136.038 90.3008 -136.785 90.6784 -137.332 91.4336  c
-137.879 92.1888 -138.152 93.2279 -138.152 94.5508  c
h
-121.551 94.5039 m
-123.009 94.5039 -124.017 94.6706 -124.574 95.0039  c
-125.132 95.3372 -125.410 95.9049 -125.410 96.7070  c
-125.410 97.3424 -125.199 97.8477 -124.777 98.2227  c
-124.355 98.5977 -123.785 98.7852 -123.066 98.7852  c
-122.066 98.7852 -121.267 98.4310 -120.668 97.7227  c
-120.069 97.0143 -119.770 96.0768 -119.770 94.9102  c
-119.770 94.5039 l
-121.551 94.5039 l
h
-117.973 93.7695 m
-117.973 100.004 l
-119.770 100.004 l
-119.770 98.3477 l
-120.176 99.0039 -120.686 99.4909 -121.301 99.8086  c
-121.915 100.126 -122.665 100.285 -123.551 100.285  c
-124.665 100.285 -125.553 99.9701 -126.215 99.3398  c
-126.876 98.7096 -127.207 97.8685 -127.207 96.8164  c
-127.207 95.5872 -126.796 94.6602 -125.973 94.0352  c
-125.150 93.4102 -123.921 93.0977 -122.285 93.0977  c
-119.770 93.0977 l
-119.770 92.9258 l
-119.770 92.0924 -120.040 91.4518 -120.582 91.0039  c
-121.124 90.5560 -121.889 90.3320 -122.879 90.3320  c
-123.504 90.3320 -124.111 90.4049 -124.699 90.5508  c
-125.288 90.6966 -125.858 90.9206 -126.410 91.2227  c
-126.410 89.5664 l
-125.754 89.3060 -125.116 89.1133 -124.496 88.9883  c
-123.876 88.8633 -123.275 88.8008 -122.691 88.8008  c
-121.108 88.8008 -119.926 89.2122 -119.145 90.0352  c
-118.363 90.8581 -117.973 92.1029 -117.973 93.7695  c
h
-112.498 85.9570 m
-112.498 89.0664 l
-108.795 89.0664 l
-108.795 90.4570 l
-112.498 90.4570 l
-112.498 96.3945 l
-112.498 97.2904 -112.376 97.8659 -112.131 98.1211  c
-111.886 98.3763 -111.389 98.5039 -110.639 98.5039  c
-108.795 98.5039 l
-108.795 100.004 l
-110.639 100.004 l
-112.024 100.004 -112.980 99.7461 -113.506 99.2305  c
-114.032 98.7148 -114.295 97.7695 -114.295 96.3945  c
-114.295 90.4570 l
-115.623 90.4570 l
-115.623 89.0664 l
-114.295 89.0664 l
-114.295 85.9570 l
-112.498 85.9570 l
h
-101.453 94.5039 m
-102.911 94.5039 -103.919 94.6706 -104.477 95.0039  c
-105.034 95.3372 -105.312 95.9049 -105.312 96.7070  c
-105.312 97.3424 -105.102 97.8477 -104.680 98.2227  c
-104.258 98.5977 -103.688 98.7852 -102.969 98.7852  c
-101.969 98.7852 -101.169 98.4310 -100.570 97.7227  c
-99.9714 97.0143 -99.6719 96.0768 -99.6719 94.9102  c
-99.6719 94.5039 l
-101.453 94.5039 l
h
-97.8750 93.7695 m
-97.8750 100.004 l
-99.6719 100.004 l
-99.6719 98.3477 l
-100.078 99.0039 -100.589 99.4909 -101.203 99.8086  c
-101.818 100.126 -102.568 100.285 -103.453 100.285  c
-104.568 100.285 -105.456 99.9701 -106.117 99.3398  c
-106.779 98.7096 -107.109 97.8685 -107.109 96.8164  c
-107.109 95.5872 -106.698 94.6602 -105.875 94.0352  c
-105.052 93.4102 -103.823 93.0977 -102.188 93.0977  c
-99.6719 93.0977 l
-99.6719 92.9258 l
-99.6719 92.0924 -99.9427 91.4518 -100.484 91.0039  c
-101.026 90.5560 -101.792 90.3320 -102.781 90.3320  c
-103.406 90.3320 -104.013 90.4049 -104.602 90.5508  c
-105.190 90.6966 -105.760 90.9206 -106.312 91.2227  c
-106.312 89.5664 l
-105.656 89.3060 -105.018 89.1133 -104.398 88.9883  c
-103.779 88.8633 -103.177 88.8008 -102.594 88.8008  c
-101.010 88.8008 -99.8281 89.2122 -99.0469 90.0352  c
-98.2656 90.8581 -97.8750 92.1029 -97.8750 93.7695  c
h
-94.1660 84.8008 m
-92.3691 84.8008 l
-92.3691 100.004 l
-94.1660 100.004 l
-94.1660 84.8008 l
h
-79.2656 94.0820 m
-79.2656 94.9570 l
-87.5156 94.9570 l
-87.4427 96.1966 -87.0729 97.1419 -86.4062 97.7930  c
-85.7396 98.4440 -84.8073 98.7695 -83.6094 98.7695  c
-82.9219 98.7695 -82.2552 98.6836 -81.6094 98.5117  c
-80.9635 98.3398 -80.3177 98.0872 -79.6719 97.7539  c
-79.6719 99.4414 l
-80.3177 99.7227 -80.9792 99.9336 -81.6562 100.074  c
-82.3333 100.215 -83.0208 100.285 -83.7188 100.285  c
-85.4688 100.285 -86.8516 99.7773 -87.8672 98.7617  c
-88.8828 97.7461 -89.3906 96.3737 -89.3906 94.6445  c
-89.3906 92.8529 -88.9089 91.4310 -87.9453 90.3789  c
-86.9818 89.3268 -85.6771 88.8008 -84.0312 88.8008  c
-82.5625 88.8008 -81.4010 89.2747 -80.5469 90.2227  c
-79.6927 91.1706 -79.2656 92.4570 -79.2656 94.0820  c
h
-81.0625 93.5508 m
-81.0729 92.5716 -81.3464 91.7904 -81.8828 91.2070  c
-82.4193 90.6237 -83.1302 90.3320 -84.0156 90.3320  c
-85.0156 90.3320 -85.8177 90.6133 -86.4219 91.1758  c
-87.0260 91.7383 -87.3750 92.5352 -87.4688 93.5664  c
-81.0625 93.5508 l
h
-67.2109 93.3945 m
-67.2109 100.004 l
-69.0078 100.004 l
-69.0078 93.4570 l
-69.0078 92.4258 -69.2109 91.6523 -69.6172 91.1367  c
-70.0234 90.6211 -70.6276 90.3633 -71.4297 90.3633  c
-72.4089 90.3633 -73.1771 90.6732 -73.7344 91.2930  c
-74.2917 91.9128 -74.5703 92.7539 -74.5703 93.8164  c
-74.5703 100.004 l
-76.3828 100.004 l
-76.3828 89.0664 l
-74.5703 89.0664 l
-74.5703 90.7695 l
-74.1432 90.1133 -73.6380 89.6211 -73.0547 89.2930  c
-72.4714 88.9648 -71.7995 88.8008 -71.0391 88.8008  c
-69.7786 88.8008 -68.8255 89.1888 -68.1797 89.9648  c
-67.5339 90.7409 -67.2109 91.8841 -67.2109 93.3945  c
h
f
3.00000 w
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
90.0042 49.9734 m
92.1505 36.3833 l
92.8830 23.0857 l
92.1976 10.1071 l
90.0941 -2.55241 l
86.5726 -14.8929 l
81.6330 -26.9143 l
75.2755 -38.6167 l
75.2555 -38.6460 l
S
newpath
67.5005 -50.0004 m
69.7672 -33.3837 l
82.1538 -41.8437 l
h
f
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
150.004 49.9734 m
152.117 36.3908 l
152.826 23.0984 l
152.127 10.1231 l
150.018 -2.53540 l
146.502 -14.8769 l
141.576 -26.9016 l
135.242 -38.6092 l
135.230 -38.6282 l
S
newpath
127.497 -49.9982 m
129.731 -33.3771 l
142.134 -41.8121 l
h
f
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
210.004 49.9734 m
212.087 36.3976 l
212.774 23.1102 l
212.062 10.1377 l
209.949 -2.51978 l
206.437 -14.8623 l
201.524 -26.8898 l
195.212 -38.6024 l
195.206 -38.6120 l
S
newpath
187.505 -50.0037 m
189.692 -33.3763 l
202.119 -41.7765 l
h
f
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
85.0000 105.000 m
78.2685 128.197 l
68.9414 150.096 l
57.0185 170.697 l
42.5000 190.000 l
S
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
145.000 105.000 m
139.888 129.006 l
135.954 140.320 l
131.100 151.175 l
125.329 161.570 l
118.638 171.506 l
102.500 190.000 l
S
1.00000 w
2 J
10.0000 M
3.00000 w
0 J
1.45000 M
newpath
205.000 105.000 m
203.783 117.673 l
201.397 129.761 l
197.840 141.264 l
193.112 152.181 l
187.215 162.514 l
180.147 172.261 l
171.908 181.423 l
162.500 190.000 l
S
1.00000 w
2 J
10.0000 M
Q
[ 1.00000 0.00000 0.00000 1.00000 0.00000 0.00000 ] defaultmatrix matrix concatmatrix setmatrix
cliprestore
end end restore showpage

%%Trailer
%%EOF
