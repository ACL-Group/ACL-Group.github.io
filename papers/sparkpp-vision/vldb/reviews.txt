Submission Category [as indicated by authors]	Innovative Systems and Applications
Relevance to PVLDB	High
Overall Rating	Weak Reject
Justification of your overall recommendation (one paragraph)	The authors propose a declarative programming interface for Bayesian inference framework on top of Spark. The proposed system has two advantages: (i) rapid prototyping of probabilistic models that can be represented in a directed graph, and (ii) handling large training data leveraging the benefits of the underlying system (GraphX and Spark). The contribution of this work is (i) to extend Scala for declarative model description and (ii) to build a module for optimized code generation for the declared model. I like this work in general, but this work needs improvements for me to recommend for a positive overall rating.
List major strong points of the paper (if any)	S1. Providing a probabilistic programming interface for distributed processing is interesting.

S2. The proposed partition strategy is useful for LDA and its variants.

S3. Implementation approach (code generation and optimization) is clear and appealing.
List major weak points of the paper (if any)	W1. I am not sure if this system is "innovative" enough to compensate for its weak experiments.

W2. The proposed system has been applied to limited cases such as LDA and its variants (only with VMP).
Significance	Incremental value
Novelty	Interesting Approach
Technical Merit	Acceptable
Presentation	Clear
Detailed Evaluation (Contribution, Pros/Cons, Errors); please number each point	D1. It is unclear what class of the model is supported by the current framework. In the first part of the paper, I thought the proposed system handles Bayesian models. Later, it turned out it only supports variational inference (VMP) of Bayesian models (in Section 2.3). Later, the paper says it supports exponential-conjugate family (in Section 4).

D2. It is unclear how general is the class of the model supported by the proposed framework. Besides LDA and its variants, is there any other models that are (or can be) supported by the proposed system? If so, I think the paper should include some statistics on them. For example, the paper can say something like "Among the 50 most popular Bayesian models used in the last 5 years, our proposed language can describe 80% of them."

D3. I am curious about how simple it is to describe models other than LDA. The authors may want to create another section just before the experiment section. (I know many papers did this.)

D4. Is your partition strategy also applicable to the models besides LDA and its variants? If so, is the complexity analysis in Tables 1 and 2 still valid?
Revision Recommendation (Do you think the submission can meet PVLDB standards with a limited revision?)	Yes
If revision is recommended, list specific revisions you seek from the Authors	R1. Include some statistics on the generality of the proposed framework. For instance, what is the proportion of Bayesian models it can support? This analysis will be helpful because the current approach has many qualifiers (Bayesian model + VMP + exponential-conjugate family).

R2. If possible, include examples (like Figure 1) that demonstrate the proposed approach can describe some methods other than LDA or its variants.

R3. Please give more formal analysis on your partition strategy so that it can be applicable to other Bayesian models. I don't think the analysis on the other approaches (1D, etc) are very informative since they are not the author's core contribution. I suggest to make a separate supplementary document if more space is needed for less-important materials.

R4. In Figure 17, finish your empirical analysis for SLDA and DCLMDA too. Those methods should be able to be implemented because those works have been published (or the author may modify Mlib to support them). It would be understandable if InferSpark does not always achieve the best performance because it is a more general system than others.

R5. It is hard to believe that infer.Net could not finish the job for 0.5% Wikipedia within a week, considering that Infer.Net took about 4 hours for 0.2% Wikipedia. Please provide more justification on the result. Also, consider to use a bigger machine (with more memory like 256GB) for Infer.Net since it uses only a single machine.
Masked Reviewer ID:	Assigned_Reviewer_3
Review:	
Question	 
Submission Category [as indicated by authors]	Regular Research
Relevance to PVLDB	Adequate
Overall Rating	Weak Reject
Justification of your overall recommendation (one paragraph)	The paper presents a system to execute probablistic programs on GraphX / 
Spark. The system covers all stages of a probabilistic programming 
framework: A language to specify the model, a compiler and code generator, a 
framework to choose appropriate inference algorithms and, finally, one such 
algorithm implemented on GraphX / Apache Spark.

The paper is well structured and easy to follow. The system presented seems 
very useful and practical, and is indeed the first end-to-end system for 
scale-out probabilistic programming available. I am looking forward to seeing
it available as OSS.

However, the paper is lacking from an academic standpoint. For one, the issue 
of scale-out probabilistic programming has been addressed before, e.g. in the
work by Alex Beutel [0][1]. Hence, the claim for no such work to exist is 
false.

Also, this prior work does in fact address a major challenge not sufficiently 
addressed in the paper at hand: When updating one parameter of a graphical 
model (GM), one typically cannot update many other parameters at the same time 
due to the dependency structure of the GM. When learning on a BSP system such
as Spark, this leads to significant problems, as the emphasis of stragglers
can be delibitating. The system presented seems to suffer from this, as it 
fails to beat single machine Infer.NET for the case when both run, despite 
using 24x the compute resources. And that despite the fact that GraphX 
chooses vertex-splitting to avoid many of the synchronization issues 
associated with edge partitioning.

Lastly, the paper doesn't make it obvious as to what is the core novelty of 
the work presented. Everything upon to and including parts of Section 4 are 
solved in existing, single-machine probablistic programming systems. GraphX 
is also not novel (nor is it claimed to be). Hence, the core contribution to 
me seems the application-specific graph partitioning scheme. It would 
significantly strengthen the paper to focus on or at least clearly highlight 
the net new aspects of the system.

I realize that the prior paragraph can come across as overly harsh. Following 
its advise probably yields other challenges; after all, the VLDB audience 
cannot be assumed to be familar with probabilistic programming. Hence, a more 
realistic way forward would be to address the performance shortcomings and to 
restructure the paper into a more substantial background section, followed by 
exactly what is new, different and interesting about SparkInfer.


[0]: http://alexbeutel.com/papers/sdm2014.flexifact.pdf
[1]: http://alexbeutel.com/papers/nipsDML2014.inferreef.pdf
List major strong points of the paper (if any)	1. This area is super-relevant to the large scale machine learning area.
Probablistic programming is a way to really democratize ML in much 
the same way as SQL did for data analysis. However, it is held back 
by poor computational performance. Something the work at hand aims to
address.
2. The paper is easy to read and follow.
3. The authors promise to release the software as OSS.
4. The system seems very practical and "real".
List major weak points of the paper (if any)	1. The related work is lacking. More consideration should be given to 
systems for GMs, such as GraphLab and the aforementioned work.
2. The novelty of the work is not clearly defined.
3. The performance of the presented system is insufficiently discussed. Why
is it slower than Infer.NET on 24x the resources? What is the 
bottleneck? What are steps to address these?
4. The paper fails to appretiate the reasoning behind vertex splitting in 
GraphX, which aims to help with the synchronization issues.
Significance	Substantive impact
Novelty	Interesting Approach
Technical Merit	Strong
Presentation	Clear
Detailed Evaluation (Contribution, Pros/Cons, Errors); please number each point	* Abstract: "has showed" -> "has shown"
* Figure 1 is hard to understand at this point.
* The declarative code contains "map", a functional construct
* Section 2.1 fails to appreciate the need for priors in the bayesian 
framework
* Section 2.2, rephrase "on generative model"
* Section 2.3 "Markov Chain" -> "the Markov Chain"
* Section 2.3, rephrase the second to last sentence
* Section 2.4, rephrase the sentence starting with "Second, the user has"
* Figure 11: The call to `.parallelize` implies a cluster operation. That 
seems wasteful.
* Section 3.4: "welcomed" -> "welcome"
* Section 4, the claim that compiled code is always faster than interpreted
code is bogus. Especially as the system runs on the JVM.
* Section 4.4, the first two sentences in the paragraph starting with 
"InferSpark's partitioning" are not needed.
* Section 5: Did you run Infer.NET on Windows? .NET continues to be faster 
there.
Revision Recommendation (Do you think the submission can meet PVLDB standards with a limited revision?)	Yes
Masked Reviewer ID:	Assigned_Reviewer_4
Review:	
Question	 
Submission Category [as indicated by authors]	Innovative Systems and Applications
Relevance to PVLDB	Should submit to alternative forum
Overall Rating	Weak Reject
Justification of your overall recommendation (one paragraph)	This paper presents the design and implementation of InferSpark, a declarative Bayesian inference framework which is implemented on top of Spark. The key claim of the paper is that probabilistic models which are not natively implemented in systems like Spark are complex to implement and require a lot of code. The InferSpark language and runtime allows programmers to express probabilistic models in a very compact representation. The idea of the paper is interesting, and if I am not mistaken, it essentially generalizes the idea of Infer.NET to the Spark runtime. However, given that the key contribution of the paper is a language abstraction with applications in ML, I am not entirely sure if VLDB is the appropriate venue for this paper. The paper is tagged as innovative systems, and while I am not questioning the innovative part of the paper, rather the systems part of the paper which is pretty shallow. The key contributions are in taking Bayesian and other graphical models and abstracting them in language constructs.
List major strong points of the paper (if any)	
S1. Deriving models that help in better understanding and modeling of data is an important and timely problem.

S2. The authors have built the system on top of Spark and are considering open sourcing the system. Given the popularity of Spark and the hotness of this area, this system has the potential for becoming an important system or a building block towards something else.
List major weak points of the paper (if any)	
W1. The systems novelty and contributions are low. Most of the novelty is in language constructs and abstractions, which makes this paper not very relevant for VLDB.

W2. The paper provides a lot of background on graphical models. I understand the urge for providing this background to the VLDB audience, however, most of it is also textbook material. This further justifies that the paper is better suited for a different venue, where the critical real estate early in the paper can be better spent in explaining the key ideas of the paper.

W3. The paper is tagged as innovative systems. However, the paper does not clearly articulate the systems challenges. Both sections 3 and 4 focus on the ML and modeling aspects.

W4. How general is the framework beyond graphical models?
Significance	Incremental value
Novelty	Interesting Approach
Technical Merit	Questionable
Presentation	Needs improvement
Detailed Evaluation (Contribution, Pros/Cons, Errors); please number each point	
The paper in general makes many claims that are non-technical, somewhat inconsistent, and would be hard to back with facts.

For instance, the abstract states that Apache Spark does not give domain users the ability to develop their own models. This is plain incorrect, which is clear from later text in the introduction which states that writing such models involve a lot of code. Difficult to develop is not equivalent to cannot develop. Similarly, the first paragraph of Section 6 also makes a claim which is hard to back with real data.

How general is the system beyond LDA? What other class of ML algorithms and models can be supported in InferSpark?

How does InferSpark compare to PyMC?

http://blog.cloudera.com/blog/2014/08/bayesian-machine-learning-on-apache-spark/

How does infer spark compare to recent commercial offering in ML from Amazon/Microsoft/Google?

The background material of Section 2 can be significantly shrunk.
Revision Recommendation (Do you think the submission can meet PVLDB standards with a limited revision?)	No

Masked Meta-Reviewer ID:	Meta_Reviewer_1
Meta-Reviews:	
Question	 
Submission Category [as indicated by authors]	Innovative Systems and Applications
Decision of Review Board	Reject
Summary Comments	Dear Authors,

Thank you for the submission to VLDB 2016. We have now received the reviews for your manuscript from the Review Board. While they appreciate your research efforts, they felt that the overall novelty of this paper --- especially regarding systems challenges --- was not sufficient for publication in the innovative systems track at VLDB. Therefore, we are unfortunately unable to consider the paper for publication in VLDB 2016. Notwithstanding, we encourage you to continue your interesting line of work, and hope that the reviews will aid you in publishing an improved version of the manuscript at an alternative forum.

Regards
- Associate Editor
